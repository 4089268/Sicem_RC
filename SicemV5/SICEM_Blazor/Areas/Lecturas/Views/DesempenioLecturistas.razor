@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Charts
@using SICEM_Blazor.Lecturas.Data
@using SICEM_Blazor.Lecturas.Models
@inject IMatToaster Toaster
@inject IJSRuntime JSRuntime
@inject SicemService sicemService
@inject LecturasService lecturasService  

<div style="width: 100%; height: calc(100vh - 20rem); display: grid; grid-template-columns: 100%; grid-template-rows: 5rem 1fr 1fr; grid-gap: .4rem .4rem;">

    <div class="border rounded bg-white px-2 d-flex align-items-center" style="grid-area:1/1/2/2;">
        <SeleccionarFechaDia fecha1="@Fecha1" fecha2="@Fecha2" ProcesarParam="@Procesar" />
    </div>

    @* ****** DataGrid ****** *@
    <div class="border rounded bg-white p-2 d-flex" style="grid-area:2/1/3/2;">
        <SfGrid @ref="dataGrid" DataSource="@datosLecturas" TValue="Lecturista" AllowResizing="true" AllowSorting="true" AllowFiltering="false"
                AllowExcelExport="true" Height="100%" Width="100%" EnableHover="true">
            <GridColumns>
                <GridColumn Field="@nameof(Lecturista.Nombre)" HeaderText="Lecturista" TextAlign="TextAlign.Left" Width="170" />
                <GridColumn Field="@nameof(Lecturista.TotalLecturas)" HeaderText="Lecturas" TextAlign="TextAlign.Center" Width="115" Format="n0" />
                <GridColumn Field="@nameof(Lecturista.H0708)" HeaderText="H 07-08" TextAlign="TextAlign.Center" Width="115" Format="n0" />
                <GridColumn Field="@nameof(Lecturista.H0809)" HeaderText="H 08-09" TextAlign="TextAlign.Center" Width="115" Format="n0" />
                <GridColumn Field="@nameof(Lecturista.H0910)" HeaderText="H 09-10" TextAlign="TextAlign.Center" Width="115" Format="n0" />
                <GridColumn Field="@nameof(Lecturista.H1011)" HeaderText="H 10-11" TextAlign="TextAlign.Center" Width="115" Format="n0" />
                <GridColumn Field="@nameof(Lecturista.H1112)" HeaderText="H 11-12" TextAlign="TextAlign.Center" Width="115" Format="n0" />
                <GridColumn Field="@nameof(Lecturista.H1213)" HeaderText="H 12-13" TextAlign="TextAlign.Center" Width="115" Format="n0" />
                <GridColumn Field="@nameof(Lecturista.H1314)" HeaderText="H 13-14" TextAlign="TextAlign.Center" Width="115" Format="n0" />
                <GridColumn Field="@nameof(Lecturista.H1415)" HeaderText="H 14-15" TextAlign="TextAlign.Center" Width="115" Format="n0" />
                <GridColumn Field="@nameof(Lecturista.H1516)" HeaderText="H 15-16" TextAlign="TextAlign.Center" Width="115" Format="n0" />
                <GridColumn Field="@nameof(Lecturista.H1617)" HeaderText="H 16-17" TextAlign="TextAlign.Center" Width="115" Format="n0" />

                <GridColumn HeaderText="Acciones" TextAlign="TextAlign.Left" Width="240">
                    <Template>
                        <div class="d-flex p-1">
                            <button type="button" class="btn btn-primary btn-sm mx-1" data-toggle="tooltip" data-placement="top" title="Accion 1" disabled >
                                <i class="fa fa-bookmark" aria-hidden="true"></i>
                            </button>
                        </div>
                    </Template>
                </GridColumn>
            </GridColumns>
        </SfGrid>
    </div>

    <!--- ****** Graficas ****** -->
    <div class="d-flex" style="grid-area:3/1/4/2;">
        <div class="border rounded bg-white mr-1 d-flex flex-column align-items-center" style="width:100%; height:100%;">
            <SfChart @ref="grafica" Title="TARIFAS FACTURADAS" Height="100%">
                <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category"></ChartPrimaryXAxis>
                <ChartPrimaryYAxis Visible="false" LabelFormat="n0" />
                <ChartTooltipSettings Enable="true" Header="Usuarios" Format="<b>${series.name}</b> : {point.y}" Shared="true"></ChartTooltipSettings>
                <ChartLegendSettings Position="LegendPosition.Right" />
                <ChartSeriesCollection>
                    <ChartSeries DataSource="@datosGrafica" Name="Lecturas" XName="Descripcion" YName="Valor1" Type="ChartSeriesType.StackingBar">
                        <ChartMarker>
                            <ChartDataLabel Visible="true" Position="Syncfusion.Blazor.Charts.LabelPosition.Outer" />
                        </ChartMarker>
                    </ChartSeries>
                </ChartSeriesCollection>
            </SfChart>
        </div>
    </div>

    <BusyIndicator Busy="@busyDialog" ContentText="Cargando datos...." />

</div>

@code{

    private SfGrid<Lecturista> dataGrid {get;set;}
    private SfChart grafica {get;set;}
    private List<Lecturista> datosLecturas {get;set;}
    private List<ChartItem> datosGrafica {get;set;}
    private bool busyDialog = false;

    private DateTime Fecha1, Fecha2;
    private int Subsistema, Sector;
    private IEnlace EnlaceSeleccionado;

    //********* Funciones  *********
    protected override void OnInitialized() {
        this.Fecha1 = DateTime.Now;
        this.Fecha2 = DateTime.Now;
        this.Subsistema = 0;
        this.Sector = 0;
    }

    protected override void OnAfterRender(bool firstRender){
        if(firstRender){
            Procesar(new SeleccionarFechaEventArgs());
        }
    }

    public void Procesar(SeleccionarFechaEventArgs e) {
        this.Fecha1 = e.Fecha1;
        this.Fecha2 = e.Fecha2;
        this.Subsistema = e.Subsistema;
        this.Sector = e.Sector;

        datosLecturas = new List<Lecturista>();
        datosGrafica = new List<ChartItem>();
        var enlaces = sicemService.ObtenerOficinasDelUsuario();
        var oficinas = sicemService.ObtenerEnlaces().Where(item => enlaces.Select(i => i.Id).Contains(item.Id)).ToArray();

        this.EnlaceSeleccionado = oficinas.FirstOrDefault();
        
        ProcesarConsulta(this.EnlaceSeleccionado);

    }

    private async void ProcesarConsulta(IEnlace oficina){
        this.busyDialog = true;
        await Task.Delay(100);
    
        var dateRange = new DateRange(Fecha1, Fecha2);
        
        this.datosLecturas = lecturasService.ObtenerLecturasPorLecturisa(dateRange, oficina).ToList();

        

        // Actualizar grafica
        var items = new List<ChartItem>();
        foreach(var item in this.datosLecturas){
            items.Add( new ChartItem(){
                Id = (int) item.IdLecturista,
                Descripcion = item.Nombre,
                Valor1 = item.TotalLecturas
            });
        }
        this.datosGrafica = items;



        await Task.Delay(100);
        this.busyDialog = false;
        StateHasChanged();
    }

}
