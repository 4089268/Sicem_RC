@using SICEM_Blazor.ControlRezago.Models
@using Syncfusion.Blazor
@using Syncfusion.Blazor.Navigations
@inject IMatToaster Toaster

<VentanaSecundaria Titulo="@Titulo" Filas="@gridFilas" Columnas="@gridColumnas" CerrarVentana="CerrarModal" >
    <Content>
        <div class="border rounded bg-white p-2">
            <SfTab @ref="sfTab" Height="100%">
                <TabItems>
                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="Resumen Por Sectores"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>
                            <div class="h-100">
                                <ResumenSectorView @ref="resumenSectorView" DatosGrid="@DatosResumenSector" OnDetailClick="@(e => MostrarVentanaDetalle(1,e))"/>
                            </div>
                        </ContentTemplate>
                    </TabItem>
                    <TabItem Content="Facebook is an online social networking service headquartered in Menlo Park, California. Its website waslaunched on February 4, 2004, by Mark Zuckerberg with his Harvard College roommates and fellow students EduardoSaverin, Andrew McCollum, Dustin Moskovitz and Chris Hughes.">
                        <ChildContent>
                            <TabHeader Text="Resumen Por Tarifas"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>
                            <div class="h-100">
                                <ResumenTarifaView @ref="resumenTarifaView" DatosGrid="@DatosResumenTarifa" OnDetailClick="@(e => MostrarVentanaDetalle(2,e))" />
                            </div>
                        </ContentTemplate>
                    </TabItem>
                    <TabItem>
                        <ChildContent>
                            <TabHeader Text="Resumen Por Colonias"></TabHeader>
                        </ChildContent>
                        <ContentTemplate>
                            <div class="h-100">
                                <ResumenColoniaView @ref="resumenColoniaView" DatosGrid="@DatosResumenColonia" OnDetailClick="@(e => MostrarVentanaDetalle(3,e))"/>
                            </div>
                        </ContentTemplate>
                    </TabItem>
                </TabItems>
            </SfTab>
        </div>
    </Content>
</VentanaSecundaria>

@if(DetalleRezagoVisible){
    <DetalleRezagoVtn Titulo="@TituloDetalle" CerrarModal="@( e => DetalleRezagoVisible = false)" Fecha1="@FechaDesde" Fecha2="@FechaHasta" Subsistema="@Subsistema" Sector="@Sector" DatosGrid="@DatosDetalleRezago" EnlaceSeleccionado="@Enlace" />
}
<BusyIndicator Busy="@busyDialog" ContentText="Cargando datos...." />

@code{
    [Parameter] public EventCallback OnClosed {get;set;}
    [Parameter] public IEnumerable<DetalleRezago> Datos {get;set;}
    [Parameter] public string Titulo {get;set;} = "RESUMEN DE USUARIOS CON ESTATUS XXXX DEL XXX AL XXXX";
    [Parameter] public IEnlace Enlace {get;set;}
    [Parameter] public DateTime FechaDesde {get;set;}
    [Parameter] public DateTime FechaHasta {get;set;}
    [Parameter] public int Subsistema {get;set;}
    [Parameter] public int Sector {get;set;}

    
    private double[] gridFilas = new double[]{.8};
    private double[] gridColumnas = new double[]{900};

    private bool busyDialog = false;
    private List<ResumenSector> DatosResumenSector {get;set;}
    private List<ResumenTarifa> DatosResumenTarifa {get;set;}
    private List<ResumenColonia> DatosResumenColonia {get;set;}
    
    private SfTab sfTab;
    private ResumenColoniaView resumenColoniaView;
    private ResumenSectorView resumenSectorView;
    private ResumenTarifaView resumenTarifaView;
    
    
    private bool DetalleRezagoVisible = false;
    private string TituloDetalle = "";
    private List<DetalleRezago> DatosDetalleRezago = new List<DetalleRezago>();
        

    private async Task CerrarModal(){
        await OnClosed.InvokeAsync();
    }

    protected override void OnInitialized() {
        var _task = new List<Task>();
        _task.Add( Task.Factory.StartNew( () => CalcularDatosSector() ));
        _task.Add( Task.Factory.StartNew( () => CalcularDatosTarifa() ));
        _task.Add( Task.Factory.StartNew( () => CalcularDatosColonias() ));

        Task.WaitAll(_task.ToArray());
    }


    private void CalcularDatosSector(){
        var _tmpData = Datos.GroupBy(item => item.Sector).Select(g => new ResumenSector(){
            Sector = g.Key,
            Usuarios = g.Count(),
            Subtotal = g.Sum(i => i.Subtotal),
            IVA = g.Sum( i => i.Iva),
            Total = g.Sum(i => i.Total)
        }).OrderBy(item => item.Sector).ToList();

        _tmpData.Add(
            new ResumenSector(){
                Sector = "TOTAL",
                Usuarios = _tmpData.Sum(i=>i.Usuarios),
                Subtotal = _tmpData.Sum(i=>i.Subtotal),
                IVA = _tmpData.Sum(i=>i.IVA),
                Total = _tmpData.Sum(i=>i.Total)
            }
        );

        DatosResumenSector = _tmpData;
    }
    private void CalcularDatosTarifa(){
        var _tmpData = Datos.GroupBy(item => item.Tarifa).Select(g => new ResumenTarifa(){
            Tarifa = g.Key,
            Usuarios = g.Count(),
            Subtotal = g.Sum(i => i.Subtotal),
            IVA = g.Sum( i => i.Iva),
            Total = g.Sum(i => i.Total)
        }).OrderBy(item => item.Tarifa).ToList();

        _tmpData.Add(
            new ResumenTarifa(){
                Tarifa = "TOTAL",
                Usuarios = _tmpData.Sum(i=>i.Usuarios),
                Subtotal = _tmpData.Sum(i=>i.Subtotal),
                IVA = _tmpData.Sum(i=>i.IVA),
                Total = _tmpData.Sum(i=>i.Total)
            }
        );

        DatosResumenTarifa = _tmpData;
    }
    private void CalcularDatosColonias(){
        var _tmpData = Datos.GroupBy(item => item.Colonia).Select(g => new ResumenColonia(){
            Colonia = g.Key,
            Usuarios = g.Count(),
            Subtotal = g.Sum(i => i.Subtotal),
            IVA = g.Sum( i => i.Iva),
            Total = g.Sum(i => i.Total)
        }).OrderBy(item => item.Colonia).ToList();

        _tmpData.Add(
            new ResumenColonia(){
                Colonia = "TOTAL",
                Usuarios = _tmpData.Sum(i=>i.Usuarios),
                Subtotal = _tmpData.Sum(i=>i.Subtotal),
                IVA = _tmpData.Sum(i=>i.IVA),
                Total = _tmpData.Sum(i=>i.Total)
            }
        );

        DatosResumenColonia = _tmpData;
    }

    private async Task MostrarVentanaDetalle(int op, string filtro){
        if(DetalleRezagoVisible){
            return;
        }

        busyDialog = true;
        await Task.Delay(100);
        
        var newTitle = Titulo;
        if(filtro == "TOTAL"){
            DatosDetalleRezago = Datos.ToList();
        
        }else{
            switch(op){
                // Sectores
                case 1:
                    DatosDetalleRezago = Datos.Where( item => item.Sector == filtro).ToList();
                    newTitle = newTitle + $" DEL SECTOR {filtro} ";
                    break;

                // Tarifas
                case 2:
                    DatosDetalleRezago = Datos.Where( item => item.Tarifa == filtro).ToList();
                    newTitle = newTitle + $" CON TARIFA {filtro} ";
                    break;

                // Colonias
                case 3:
                    DatosDetalleRezago = Datos.Where( item => item.Colonia == filtro).ToList();
                    newTitle = newTitle + $" DEL LA COLONIA {filtro} ";
                    break;
            }
        }
        
        if(DatosDetalleRezago.Count() <= 0){
            Toaster.Add("No hay datos disponibles para mostrar", MatToastType.Warning);
        }else {
            this.TituloDetalle = newTitle;
            DetalleRezagoVisible = true;
        }

        await Task.Delay(100);
        busyDialog = false;
    }

}