@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Grids
@using SICEM_Blazor.ControlRezago.Models
@inject IJSRuntime JSRuntime
@inject ControlRezagoService controlRezService

@if (Visible) {
    <div class="busy-control">

        <div id="draggable" class="SicemDialog-control" style="width:auto; height:auto;">

            @* *********** Cabecera *********** *@
            <div class="SicemDialog-header">
                <div>CONCEPTOS FACTURADOS</div>
                <MatIcon @onclick="@Cerrar_Modal" Class="close-icon" style="margin-left: auto;" Icon="clear"></MatIcon>
            </div>

            @* *********** Contenido *********** *@
            <div class="SicemDialog-content" style="@ObtnerDimensiones()">

                <div class="d-flex align-items-center m-1 p-2 border rounded bg-white" style="grid-row: 1/2; grid-column: 1/2;">
                    <div class="d-flex mx-2 align-items-center">
                        <div class="mr-2 font-weight-bold" style="width:15rem;">Meses Morosos:</div>
                        <SfNumericTextBox Value="@mesesMorozo" TValue="int?" Format="n0" ShowSpinButton="false" CssClass="e-small">
                            <NumericTextBoxEvents TValue="int?" ValueChange="OnChange_Meses"></NumericTextBoxEvents>
                        </SfNumericTextBox>
                    </div>

                    <div class="d-flex mx-2 align-items-center">
                        <div class="mr-2 font-weight-bold" style="width:14rem;">Saldo Moroso:</div>
                        <SfNumericTextBox Value="@saldoMorozo" TValue="double?" Format="c2" ShowSpinButton="false" CssClass="e-small">
                            <NumericTextBoxEvents TValue="double?" ValueChange="OnChange_Saldo"></NumericTextBoxEvents>
                        </SfNumericTextBox>
                    </div>

                    <MatButton Class="ml-1 mr-2" Raised="true" Style="height:2.5rem; padding: 0rem 3rem;" OnClick="@Procesar">Procesar</MatButton>

                    <div style="width:160px" />

                    <div class="w-100 d-flex align-items-center">
                        <MatButton Class="ml-1 mr-2" Raised="true" Style="height:2.5rem;" OnClick="@GenerarExcel">Exportar Excel <i class="fa fa-file-excel-o ml-2" aria-hidden="true"></i> </MatButton>
                    </div>
                </div>


                <div class="m-1 p-2 border rounded bg-white" style="grid-row: 2/3; grid-column: 1/2;">
                    <SfGrid @ref="dataGrid" DataSource="@datosGrid" AllowResizing="true" AllowSorting="true" AllowFiltering="false" AllowExcelExport="true" AllowPdfExport="true" Height="100%" Width="auto" EnableHover="true">
                        <GridColumns>
                            <GridColumn Field="@nameof(ControlRezago_AnalisisCart_Resumen.Tipo_Usuario)" HeaderText="Tipo Usuario" TextAlign="TextAlign.Left" Width="180" />
                            <GridColumn Field="@nameof(ControlRezago_AnalisisCart_Resumen.Usu_Regular)" HeaderText="Usu Regular" TextAlign="TextAlign.Center" Width="90" />
                            <GridColumn Field="@nameof(ControlRezago_AnalisisCart_Resumen.Imp_Regular)" HeaderText="Imp Regular" TextAlign="TextAlign.Right" Width="100" Format="c2" />
                            <GridColumn Field="@nameof(ControlRezago_AnalisisCart_Resumen.Usu_Moroso)" HeaderText="Usu Moroso" TextAlign="TextAlign.Center" Width="90" />
                            <GridColumn Field="@nameof(ControlRezago_AnalisisCart_Resumen.Imp_Moroso)" HeaderText="Imp Moroso" TextAlign="TextAlign.Right" Width="90" Format="c2" />
                            <GridColumn Field="@nameof(ControlRezago_AnalisisCart_Resumen.Usu_Total)" HeaderText="Usu Total" TextAlign="TextAlign.Center" Width="90" />
                            <GridColumn Field="@nameof(ControlRezago_AnalisisCart_Resumen.Imp_Total)" HeaderText="Imp Total" TextAlign="TextAlign.Right" Width="100" Format="c2" />
                        </GridColumns>
                    </SfGrid>
                </div>

                <div class="m-1 p-2 border rounded bg-white" style="grid-row: 3/4; grid-column: 1/2;">
                    <SfChart Title="" Height="185">
                        <ChartPrimaryXAxis Title="" ValueType="Syncfusion.Blazor.Charts.ValueType.Category"></ChartPrimaryXAxis>
                        <ChartPrimaryYAxis Title="Usuarios"></ChartPrimaryYAxis>
                        <ChartTooltipSettings Enable="true" Header="${point.x}" Shared="true" Format="${series.name}: ${point.y}"></ChartTooltipSettings>
                        <ChartLegendSettings Visible="false" Position="LegendPosition.Right"></ChartLegendSettings>
                        <ChartSeriesCollection>
                            @*<ChartSeries DataSource="@datosGrafica" Name="Usu Regulares" XName="Descripcion" YName="Valor1" Type="ChartSeriesType.StackingColumn">
                                <ChartMarker>
                                    <ChartDataLabel Visible="true"></ChartDataLabel>
                                </ChartMarker>
                            </ChartSeries>*@
                            <ChartSeries DataSource="@datosGrafica" Name="Usu Morosos" XName="Descripcion" YName="Valor2" Type="ChartSeriesType.StackingColumn">
                                <ChartMarker>
                                    <ChartDataLabel Visible="true"></ChartDataLabel>
                                </ChartMarker>
                            </ChartSeries>
                        </ChartSeriesCollection>
                    </SfChart>
                </div>
            </div>
        </div>

    </div>

    <BusyIndicator Busy="@busyDiaglog" ContentText="Cargando datos...." />
}

@code {

    #region  "******** Parametros ********"
    [Parameter]
    public bool Visible { get; set; }

    [Parameter]
    public EventCallback CerrarModal { get; set; }
    [Parameter]
    public DateTime Fecha1 { get; set; }
    [Parameter]
    public DateTime Fecha2 { get; set; }
    [Parameter]
    public int Subsistema { get; set; }
    [Parameter]
    public int Sector { get; set; }

    List<int> GridFilas = new List<int>() { 50, 400, 200 };
    List<int> GridColumnas = new List<int>() { 1020 };
    #endregion
    #region "******** Funciones Base ********"
    private async Task Cerrar_Modal() {
        this.datosGrid = new ControlRezago_AnalisisCart_Resumen[] { };
        await CerrarModal.InvokeAsync("");
    }
    private string ObtnerDimensiones() {
        var xB = new System.Text.StringBuilder();
        xB.Append("height: 100%; width:100%; ");
        xB.Append("display:grid; ");
        xB.Append("grid-template-rows: ");
        foreach (int FilaH in GridFilas) {
            xB.Append(string.Format("{0}px ", FilaH));
        }
        xB.Append("; ");

        xB.Append("grid-template-columns: ");
        foreach (int ColW in GridColumnas) {
            xB.Append(string.Format("{0}px ", ColW));
        }
        xB.Append("; ");

        return xB.ToString();
    }
    #endregion


    //"******** Variables ********"
    SfGrid<ControlRezago_AnalisisCart_Resumen> dataGrid;
    public ControlRezago_AnalisisCart_Resumen[] datosGrid;
    public CharItem[] datosGrafica = new CharItem[] { };
    public int Id_Oficina = 0;
    private bool busyDiaglog = false;
    public int mesesMorozo { get; set; } = 12;
    public double saldoMorozo { get; set; } = 700;


    //"******** Funciones Generales ********"
    public async Task Inicializar(ControlRezago_AnalisisCart_Resumen[] datos) {
        await JSRuntime.InvokeVoidAsync("ConfigurateDragg", null);
        this.datosGrid = datos;

        var tmpList = new List<CharItem>();
        foreach (var item in datosGrid) {
            if (item.Id_Tipo_Usuario > 0) {
                tmpList.Add(new CharItem {
                    Descripcion = item.Tipo_Usuario,
                    Valor1 = (decimal)item.Usu_Regular,
                    Valor2 = (decimal)item.Usu_Moroso
                });
            }
        }
        this.datosGrafica = tmpList.ToArray<CharItem>();
        busyDiaglog = false;
    }

    private async Task Procesar() {
        this.busyDiaglog = true;
        var tmpData = controlRezService.ControlRezago_AnalisisResumen(Id_Oficina, 0, 0, mesesMorozo, saldoMorozo);
        await Inicializar(tmpData);
    }

    public void OnChange_Meses(Syncfusion.Blazor.Inputs.ChangeEventArgs<int?> args) {
        mesesMorozo = (int)args.Value;
        StateHasChanged();
    }
    public void OnChange_Saldo(Syncfusion.Blazor.Inputs.ChangeEventArgs<double?> args) {
        saldoMorozo = (double)args.Value;
        StateHasChanged();
    }

    private async Task GenerarExcel() {
        await this.dataGrid.ExcelExport(new ExcelExportProperties {
            FileName = string.Format("sicem_{0}.xlsx", Guid.NewGuid().ToString().Replace("-", ""))
        });
    }
    private async Task GenerarPdf() {
        string titulo = string.Format("Ingresos por Conceptos del {0} al {1}", this.Fecha1.ToString("dd/MM/yyyy"), this.Fecha2.ToString("dd/MM/yyyy"));
        List<PdfHeaderFooterContent> xconts = new List<PdfHeaderFooterContent>();
        xconts.Add(
            new PdfHeaderFooterContent() {
                Type = ContentType.Text,
                Value = titulo,
                Position = new PdfPosition() { X = 10, Y = 10 },
                Style = new PdfContentStyle() {
                    TextBrushColor = "#000000",
                    FontSize = 13
                }
            }
        );

        await this.dataGrid.PdfExport(new PdfExportProperties {
            PageOrientation = PageOrientation.Landscape,
            Header = new PdfHeader {
                Contents = xconts
            },
            FileName = string.Format("sicem_IngresosxDias{0}.pdf", Guid.NewGuid().ToString().Replace("-", ""))
        });
    }

    public class CharItem {
        public string Descripcion { get; set; }
        public decimal Valor1 { get; set; }
        public decimal Valor2 { get; set; }
    }
}