@page "/ControlRezago"
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Grids
@using SICEM_Blazor.ControlRezago.Models
@inject IMatToaster Toaster
@inject SicemService sicemService
@inject ControlRezagoService controlRezagoService
@inject NavigationManager navigationManager


<div class="layout-page1">

    <div class="title-page ">ANTIGUEDAD DE SALDOS</div>

    <div class="border rounded bg-white px-2 d-flex align-items-center" style="grid-area:2/1/3/2;">
        <SeleccionarFecha ProcesarParam="@Procesar" MostrarPeriodos="false" fecha1="@FechaDesde" fecha2="@FechaHasta" FiltroEstatus="true" />
    </div>

    <div class="border rounded bg-white d-flex align-items-center p-1" style="grid-area:3/1/4/2;">
        <MatButton Class="ml-2 mr-2 bg-success" Raised="true" OnClick="@GenerarExcel">Exportar Excel <i class="fa fa-file-excel-o ml-2" aria-hidden="true"></i> </MatButton>
    </div>

    @* *** DataGrid *** *@
    <div class="border rounded bg-white p-2 d-flex" style="grid-area:4/1/5/2;">
        <SfGrid @ref="DataGrid" DataSource="@DatosGrid" AllowSorting="false" AllowResizing="true" AllowFiltering="false" AllowExcelExport="true" Height="100%" Width="100%" EnableHover="true">
            <GridColumns>
                <GridColumn HeaderText="" TextAlign="TextAlign.Center" Width="40">
                    <Template>
                        @{
                            var data = (context as ResumenOficina);
                            if(data.Id > 0 && data.Id < 900){
                                switch (data.Estatus) {
                                    case Data.Contracts.ResumenOficinaEstatus.Completado:
                                        <i class="fas fa-check-circle" style="color:green; font-size:1.5rem;"></i>
                                        break;

                                    case Data.Contracts.ResumenOficinaEstatus.Error:
                                        <i class="fas fa-exclamation-circle" style="color:red; font-size:1.5rem;"></i>
                                        break;

                                    default:
                                        <div class="spinner-border p-2" role="status" style="font-size:1.5rem;"> </div>
                                        break;
                                }
                            }
                            
                        }
                    </Template>
                </GridColumn>
                <GridColumn Field="@nameof(ResumenOficina.Oficina)" HeaderText="Tipo de Usuario" TextAlign="TextAlign.Left" Width="110" />

                <GridColumn TextAlign="TextAlign.Center" Width="140">
                    <HeaderTemplate>
                        <div class="color1">M.A. 0</div>
                    </HeaderTemplate>
                    <Template>
                        @{
                            var data = (context as ResumenOficina);
                            <div class="d-flex flex-column align-items-center justify-content-around">
                                <div class="txt-usuarios">@data.Imp_0.ToString("c2")</div>
                                <div>@data.Usu_0.ToString("n0")</div>
                            </div>
                        }
                    </Template>
                </GridColumn>
                <GridColumn TextAlign="TextAlign.Center" Width="140">
                    <HeaderTemplate>
                        <div class="color1">M.A. 1-2</div>
                    </HeaderTemplate>
                    <Template>
                        @{
                            var data = (context as ResumenOficina);
                            <div class="d-flex flex-column align-items-center justify-content-around">
                                <div class="txt-usuarios">@data.Imp_1_2.ToString("c2")</div>
                                <div>@data.Usu_1_2.ToString("n0")</div>
                            </div>
                        }
                    </Template>
                </GridColumn>
                <GridColumn TextAlign="TextAlign.Center" Width="140">
                    <HeaderTemplate>
                        <div class="color1">M.A. 3-5</div>
                    </HeaderTemplate>
                    <Template>
                        @{
                            var data = (context as ResumenOficina);
                            <div class="d-flex flex-column align-items-center justify-content-around">
                                <div class="txt-usuarios">@data.Imp_3_5.ToString("c2")</div>
                                <div>@data.Usu_3_5.ToString("n0")</div>
                            </div>
                        }
                    </Template>
                </GridColumn>
                <GridColumn TextAlign="TextAlign.Center" Width="140">
                    <HeaderTemplate>
                        <div class="color1">M.A. 6-10</div>
                    </HeaderTemplate>
                    <Template>
                        @{
                            var data = (context as ResumenOficina);
                            <div class="d-flex flex-column align-items-center justify-content-around">
                                <div class="txt-usuarios">@data.Imp_6_10.ToString("c2")</div>
                                <div>@data.Usu_6_10.ToString("n0")</div>
                            </div>
                        }
                    </Template>
                </GridColumn>
                <GridColumn TextAlign="TextAlign.Center" Width="140">
                    <HeaderTemplate>
                        <div class="color1">M.A. >11</div>
                    </HeaderTemplate>
                    <Template>
                        @{
                            var data = (context as ResumenOficina);
                            <div class="d-flex flex-column align-items-center justify-content-around">
                                <div class="txt-usuarios">@data.Imp_11.ToString("c2")</div>
                                <div>@data.Usu_11.ToString("n0")</div>
                            </div>
                        }
                    </Template>
                </GridColumn>
                <GridColumn TextAlign="TextAlign.Center" Width="140">
                    <HeaderTemplate>
                        <div class="">Total</div>
                    </HeaderTemplate>
                    <Template>
                        @{
                            var data = (context as ResumenOficina);
                            <div class="d-flex flex-column align-items-center justify-content-around">
                                <div class="txt-usuarios">@data.Total.ToString("c2")</div>
                                <div>@data.Usuarios.ToString("n0")</div>
                            </div>
                        }
                    </Template>
                </GridColumn>
            
                <GridColumn Field="@nameof(ResumenOficina.Usu_0)" HeaderText="Usu M.A. 0" TextAlign="TextAlign.Center" Width="90" Format="n0" Visible="false" />
                <GridColumn Field="@nameof(ResumenOficina.Imp_0)" HeaderText="Imp M.A. 0" TextAlign="TextAlign.Right" Width="90" Format="c2" Visible="false"/>
                <GridColumn Field="@nameof(ResumenOficina.Usu_1_2)" HeaderText="Usu M.A. 1-2" TextAlign="TextAlign.Center" Width="90" Format="n0" Visible="false" />
                <GridColumn Field="@nameof(ResumenOficina.Imp_1_2)" HeaderText="Imp M.A. 1-2" TextAlign="TextAlign.Right" Width="90" Format="c2" Visible="false"/>
                <GridColumn Field="@nameof(ResumenOficina.Usu_3_5)" HeaderText="Usu M.A. 3-5" TextAlign="TextAlign.Center" Width="90" Format="n0" Visible="false" />
                <GridColumn Field="@nameof(ResumenOficina.Imp_3_5)" HeaderText="Imp M.A. 3-5" TextAlign="TextAlign.Right" Width="90" Format="c2" Visible="false"/>
                <GridColumn Field="@nameof(ResumenOficina.Usu_6_10)" HeaderText="Usu M.A. 6-10" TextAlign="TextAlign.Center" Width="90" Format="n0" Visible="false" />
                <GridColumn Field="@nameof(ResumenOficina.Imp_6_10)" HeaderText="Imp M.A. 6-10" TextAlign="TextAlign.Right" Width="90" Format="c2" Visible="false"/>
                <GridColumn Field="@nameof(ResumenOficina.Usu_11)" HeaderText="Usu M.A. >11" TextAlign="TextAlign.Center" Width="90" Format="n0" Visible="false" />
                <GridColumn Field="@nameof(ResumenOficina.Imp_11)" HeaderText="Imp M.A. >11" TextAlign="TextAlign.Right" Width="90" Format="c2" Visible="false"/>

                <GridColumn Field="@nameof(ResumenOficina.Usuarios)" HeaderText="Total Usuarios" TextAlign="TextAlign.Center" Width="90" Format="n0" Visible="false"/>
                <GridColumn Field="@nameof(ResumenOficina.Total)" HeaderText="Total Importe" TextAlign="TextAlign.Right" Width="90" Format="c2" Visible="false"/>

                <GridColumn HeaderText="Acciones" TextAlign="TextAlign.Left" Width="90">
                    <Template>
                        @{
                            var data = (context as ResumenOficina);
                            if (data.Id > 0 && data.Id < 999) {
                                <div class="d-flex p-1">
                                    <button type="button" class="btn btn-primary btn-sm mx-1" data-toggle="tooltip" data-placement="top" title="Resumen Tarifas" disabled="@(data.Estatus != SICEM_Blazor.Data.Contracts.ResumenOficinaEstatus.Completado)" @onclick="@(e => RezagoTarifasClick(data))">
                                        <i class="fa fa-bookmark" aria-hidden="true"></i>
                                    </button>
                                    <button type="button" class="btn btn-primary btn-sm mx-1" data-toggle="tooltip" data-placement="top" title="Resumen Localidades" disabled="@(data.Estatus != SICEM_Blazor.Data.Contracts.ResumenOficinaEstatus.Completado)" @onclick="@(e => RezagoLocalidadesClick(data))">
                                        <i class="fa fa-bookmark" aria-hidden="true"></i>
                                    </button>
                                </div>
                            }
                        }
                    </Template>
                </GridColumn>

            </GridColumns>
        </SfGrid>
    </div>
    
    @* *** Graficas *** *@
    <div class=" p-1 my-2 border rounded bg-white w-100">
         <SfChart @ref="GraficaUsuarios" Height="100%" Width="100%" Title="Grafica Usuarios">
            <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category"></ChartPrimaryXAxis>
            <ChartPrimaryYAxis Visible="false" LabelFormat="n0" />
            <ChartTooltipSettings Enable="true" Header="Ingresos" Format="<b>${series.name}</b> : ${point.y}" Shared="true"></ChartTooltipSettings>
            <ChartLegendSettings Visible="true" Position="LegendPosition.Right"></ChartLegendSettings>
            <ChartSeriesCollection>

                <ChartSeries DataSource="@DatosGrafica" Name="Usuarios Rango 1" XName="Descripcion" YName="Valor1" Type="ChartSeriesType.StackingBar">
                    <ChartMarker>
                        <ChartDataLabel Visible="true" Position="Syncfusion.Blazor.Charts.LabelPosition.Middle" />
                    </ChartMarker>
                </ChartSeries>

                <ChartSeries DataSource="@DatosGrafica" Name="Usuarios Rango 2" XName="Descripcion" YName="Valor2" Type="ChartSeriesType.StackingBar">
                    <ChartMarker>
                        <ChartDataLabel Visible="true" Position="Syncfusion.Blazor.Charts.LabelPosition.Middle" />
                    </ChartMarker>
                </ChartSeries>

                <ChartSeries DataSource="@DatosGrafica" Name="Usuarios Rango 3" XName="Descripcion" YName="Valor3" Type="ChartSeriesType.StackingBar">
                    <ChartMarker>
                        <ChartDataLabel Visible="true" Position="Syncfusion.Blazor.Charts.LabelPosition.Middle" />
                    </ChartMarker>
                </ChartSeries>

                <ChartSeries DataSource="@DatosGrafica" Name="Usuarios Rango 4" XName="Descripcion" YName="Valor4" Type="ChartSeriesType.StackingBar">
                    <ChartMarker>
                        <ChartDataLabel Visible="true" Position="Syncfusion.Blazor.Charts.LabelPosition.Middle" />
                    </ChartMarker>
                </ChartSeries>

                <ChartSeries DataSource="@DatosGrafica" Name="Usuarios Rango 5" XName="Descripcion" YName="Valor5" Type="ChartSeriesType.StackingBar">
                    <ChartMarker>
                        <ChartDataLabel Visible="true" Position="Syncfusion.Blazor.Charts.LabelPosition.Middle" />
                    </ChartMarker>
                </ChartSeries>

            </ChartSeriesCollection>
        </SfChart>
    </div>

</div>

<style type="text/css">
    .link-btn:hover{
        font-weight: normal !important;
        background-color: #e0e0e0;
    }
    .color1{
        color:#00897b !important;
    }
    .color2{
        color:#03a9f4 !important;
    }
    .color3{
        color:#ef5350 !important;
    }

</style>


@* ****** Dialogos y ventanas secundarias ****** *@
@if(VentanaResumenVisible){
    <ResumenVtn Datos="@DatosDetalleRezago" OnClosed="@(e => VentanaResumenVisible = false)" Titulo="@TituloResumen" Enlace="@enlaceSeleccionado" FechaDesde="@FechaDesde" FechaHasta="@FechaHasta" Subsistema="@Subsistema" Sector="@Sector" />
}

<ResumenLocalidadesGlobalVtn @ref="resumenLocalidadesGlobalVtn" Visible="@resumenLocalidadesGlobalVisible" CerrarModal="@(e => resumenLocalidadesGlobalVisible = false)" />
<ResumenTarifasGlobalVtn @ref="resumenTarifasGlobalVtn"  Visible="@resumenTarifasGlobalVisible" CerrarModal="@(e => resumenTarifasGlobalVisible = false)" />

<BusyIndicator Busy="@busyDialog" ContentText="Cargando datos...." />

@code{
    private SfGrid<ResumenOficina> DataGrid {get;set;}
    private List<ResumenOficina> DatosGrid {get;set;}
    private SfChart GraficaUsuarios {get;set;} 
    public List<ChartItem> DatosGrafica {get;set;}

    private DateTime FechaDesde, FechaHasta;
    private int Subsistema, Sector, IdEstatus;
    private bool busyDialog = false, VentanaResumenVisible = false, resumenLocalidadesGlobalVisible = false, resumenTarifasGlobalVisible = false ;
    private IEnlace enlaceSeleccionado {get;set;}
    private List<DetalleRezago> DatosDetalleRezago {get;set;}
    private string TituloResumen = "";
    
    private ResumenLocalidadesGlobalVtn resumenLocalidadesGlobalVtn;
    private ResumenTarifasGlobalVtn resumenTarifasGlobalVtn;


    //********* Funciones  *********
    protected override void OnInitialized() {
        // Validar si se cuenta con la opcion
        if(!sicemService.Usuario.OpcionSistemas.Select(item => item.Id).Contains(OpcionesSistema.CONTROL_REZAGO)){
            navigationManager.NavigateTo("/");
            return;
        }

        var _now = DateTime.Now.AddMonths(-1);
        this.FechaDesde = new DateTime(_now.Year, _now.Month, 1);
        this.FechaHasta = new DateTime(_now.Year, _now.Month, DateTime.DaysInMonth(_now.Year, _now.Month));
        this.Subsistema = 0;
        this.Sector = 0;
    }

    public void Procesar(SeleccionarFechaEventArgs e) {
        Console.WriteLine("Id Estatus Seleccionado: " + e.IdEstatus);

        this.FechaDesde = e.Fecha1;
        this.FechaHasta = e.Fecha2;
        this.Subsistema = e.Subsistema;
        this.Sector = e.Sector;
        this.IdEstatus = e.IdEstatus;

        var enlaces = sicemService.ObtenerOficinasDelUsuario();

        //****** Preparar filas
        DatosGrid = new List<ResumenOficina>();
        DatosGrafica = new List<ChartItem>();

        var Tareas = new List<Task>();

        //****** Prepara Filas
        foreach (var enlace in enlaces) {
            var oficinaModel = new ResumenOficina();
            oficinaModel.Enlace  = enlace;
            DatosGrid.Add(oficinaModel);
            Tareas.Add(new Task(() => ConsultarOficina(enlace)) );

            var _itemGraf = new ChartItem() {
                Id = enlace.Id,
                Descripcion = enlace.Nombre
            };
            this.DatosGrafica.Add(_itemGraf);
        }

        //*** Agregar fila total
        if (enlaces.Count() > 1) {
            var oficinaModel = new ResumenOficina();
            DatosGrid.Add(oficinaModel);
        }

        //****** Iniciar tareas
        foreach (var tarea in Tareas) { tarea.Start(); }

    }
    private void ConsultarOficina(IEnlace enlace) {

        //*** Realizar consulta
        ResumenOficina tmpDatos = controlRezagoService.ObtenerRezagoResumenOficina(enlace, FechaDesde.Year, FechaDesde.Month, Subsistema, Sector, IdEstatus);

        var _random = new Random();
        var sleep = _random.Next(2000);
        System.Threading.Thread.Sleep(sleep);

        //*** Refrescar datos grid
        lock(DatosGrid){

            //*** Actualizar fila grid
            var item = DatosGrid.Where(item => item.Id == enlace.Id).FirstOrDefault();
            if (item != null) {
                if (tmpDatos.Estatus == Data.Contracts.ResumenOficinaEstatus.Completado) {
                    item.Estatus =  tmpDatos.Estatus;
                    item.Usu_0 = tmpDatos.Usu_0;
                    item.Usu_1_2 = tmpDatos.Usu_1_2;
                    item.Usu_3_5 = tmpDatos.Usu_3_5;
                    item.Usu_6_10 = tmpDatos.Usu_6_10;
                    item.Usu_11 = tmpDatos.Usu_11;
                    item.Usuarios = tmpDatos.Usuarios;
                    item.Imp_0 = tmpDatos.Imp_0;
                    item.Imp_1_2 = tmpDatos.Imp_1_2;
                    item.Imp_3_5 = tmpDatos.Imp_3_5;
                    item.Imp_6_10 = tmpDatos.Imp_6_10;
                    item.Imp_11 = tmpDatos.Imp_11;
                    item.Total = tmpDatos.Total;
                }
                else {
                    item.Estatus = Data.Contracts.ResumenOficinaEstatus.Error;
                }
            }

            RecalcularFilaTotal();
            DataGrid.Refresh();
        }

        lock(DatosGrafica){
            var _itemGrafica = this.DatosGrafica.Where(item => item.Id == enlace.Id).FirstOrDefault();
            if( _itemGrafica != null) {
                _itemGrafica.Valor1 = (decimal)tmpDatos.Usu_0;
                _itemGrafica.Valor2 = (decimal)tmpDatos.Usu_1_2;
                _itemGrafica.Valor3 = (decimal)tmpDatos.Usu_3_5;
                _itemGrafica.Valor4 = (decimal)tmpDatos.Usu_6_10;
                _itemGrafica.Valor5 = (decimal)tmpDatos.Usu_11;
            }
            try {
                this.GraficaUsuarios.RefreshLiveData();
            }
            catch (Exception) { }
        }

    }
    private void RecalcularFilaTotal() {
        //*** Recalcular fila total
        var itemTotal = DatosGrid.Where(item => item.Id == 999).FirstOrDefault();
        if (itemTotal != null) {
            var _tmpData = DatosGrid.Where(item => item.Id != 999).ToList();
            itemTotal.Usu_0 = _tmpData.Sum(item => item.Usu_0);
            itemTotal.Usu_1_2 = _tmpData.Sum(item => item.Usu_1_2);
            itemTotal.Usu_3_5 = _tmpData.Sum(item => item.Usu_3_5);
            itemTotal.Usu_6_10 = _tmpData.Sum(item => item.Usu_6_10);
            itemTotal.Usu_11 = _tmpData.Sum(item => item.Usu_11);
            itemTotal.Usuarios = _tmpData.Sum(item => item.Usuarios);
            itemTotal.Imp_0 = _tmpData.Sum(item => item.Imp_0);
            itemTotal.Imp_1_2 = _tmpData.Sum(item => item.Imp_1_2);
            itemTotal.Imp_3_5 = _tmpData.Sum(item => item.Imp_3_5);
            itemTotal.Imp_6_10 = _tmpData.Sum(item => item.Imp_6_10);
            itemTotal.Imp_11 = _tmpData.Sum(item => item.Imp_11);
            itemTotal.Total = _tmpData.Sum(item => item.Total);
        }
    }

    private async Task GenerarExcel() {
        await this.DataGrid.ExcelExport(new ExcelExportProperties {
            IncludeHiddenColumn = true,
            FileName = string.Format("sicem_{0}.xlsx", Guid.NewGuid().ToString().Replace("-", ""))
        });
    }

    private async Task DetalleRezago(ResumenOficina context, int opcion){
        await Task.Delay(100);
        /*
        if(VentanaResumenVisible){
            return;
        }
        
        this.busyDialog = true;
        await Task.Delay(100);

        this.enlaceSeleccionado = context.Enlace;

        // Generar el titulo de la ventana de detalle
        this.TituloResumen = "USUARIOS CON REZAGO";
        switch(opcion){
            case 1:
                TituloResumen = "USUARIOS REGULARES CON REZAGO";
                break;
            
            case 2:
                TituloResumen = "USUARIOS RECUPERABLES CON REZAGO";
                break;
                
            case 3:
                TituloResumen = "USUARIOS MOROSOS CON REZAGO";
                break;

        }
        TituloResumen = TituloResumen + $" DE {FechaDesde.ToString("MMMM").ToUpper()} DEL {FechaDesde.Year}";
        DatosDetalleRezago = controlRezagoService.ObtenerDetalle(enlaceSeleccionado, FechaDesde.Year, FechaDesde.Month, Subsistema, Sector, opcion).ToList();

        VentanaResumenVisible = true;

        await Task.Delay(100);
        this.busyDialog = false;

        */
    }
    
    private async Task RezagoTarifasClick(ResumenOficina context){
        if(resumenTarifasGlobalVisible){
            return;
        }

        busyDialog = true;
        await Task.Delay(100);

        var datos = controlRezagoService.ObtenerHistorialSaldosTarifa(context.Enlace, FechaDesde.Year, FechaDesde.Month, Subsistema, Sector, IdEstatus);
        if(datos.Count() <= 0){
            Toaster.Add("No hay datos disponibles", MatToastType.Info);
        }else{
            resumenTarifasGlobalVisible = true;
            resumenTarifasGlobalVtn.Inicializar(context.Enlace, datos);
        }

        await Task.Delay(100);
        busyDialog = false;
        
    }
    private async Task RezagoLocalidadesClick(ResumenOficina context){
        if(resumenLocalidadesGlobalVisible){
            return;
        }

        busyDialog = true;
        await Task.Delay(100);

        var datos = controlRezagoService.ObtenerHistorialSaldosLocalidad(context.Enlace, FechaDesde.Year, FechaDesde.Month, Subsistema, Sector, IdEstatus);
        if(datos.Count() <= 0){
            Toaster.Add("No hay datos disponibles", MatToastType.Info);
        }else{
            resumenLocalidadesGlobalVisible = true;
            resumenLocalidadesGlobalVtn.Inicializar(context.Enlace, datos);
        }

        await Task.Delay(100);
        busyDialog = false;
    }

}
