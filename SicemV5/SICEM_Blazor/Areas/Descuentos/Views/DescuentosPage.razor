@page "/Descuentos"
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Charts
@using SICEM_Blazor.Descuentos.Models
@using SICEM_Blazor.Data.Contracts
@inject NavigationManager navigationManager
@inject IMatToaster Toaster
@inject DescuentosService descuentosService
@inject SicemService sicemService

<div class="layout-page1">
    
    <div class="title-page" style="grid-area:1/1/2/2;">CONSULTA DE DESCUENTOS</div>

    <div class="border rounded bg-white px-2 d-flex align-items-center" style="grid-area:2/1/3/2;">
        <SeleccionarFecha ProcesarParam="@Procesar" />
    </div>

    @* ****** Acciones ****** *@
    <div class="border rounded bg-white p-2 d-flex align-items-center" style="grid-area: 3/1/4/2;">
        <MatButton Class="mx-2" style="min-width: 130px;" Raised="true" @onclick="ExportarExcel">Exportar Excel</MatButton>
        <MatButton Class="mx-2" style="min-width: 130px;" Raised="true" Disabled="true">Generar Reporte</MatButton>
    </div>

    @* ****** DataGrid ****** *@
    <div class="border rounded bg-white p-2 d-flex" style="grid-area: 4/1/5/2;">
        <SfGrid @ref="dataGrid" DataSource="@datosGrid" TValue="Descuentos_Totales" AllowResizing="true" AllowSorting="true" AllowFiltering="false" AllowExcelExport="true" AllowPdfExport="true" 
                Height="99%" Width="100%" EnableHover="true">
            <GridColumns>
                <GridColumn HeaderText="" TextAlign="TextAlign.Center" Width="40">
                    <Template>
                        @{
                            var data = (context as Descuentos_Totales);
                            if(data.Id_Oficina > 0 && data.Id_Oficina < 999) {
                        
                                @switch (data.Estatus) {

                                    case ResumenOficinaEstatus.Completado:
                                        <i class="fas fa-check-circle" style="color:green; font-size:1.5rem;"></i>
                                        break;

                                    case ResumenOficinaEstatus.Error:
                                        <i class="fas fa-exclamation-circle" style="color:red; font-size:1.5rem;"></i>
                                        break;

                                    default:
                                        <div class="spinner-border p-2" role="status"> </div>
                                        break;
                                }
                            }
                        }
                    </Template>
                </GridColumn>
                <GridColumn Field="@nameof(Descuentos_Totales.Oficina)" HeaderText="Oficina" TextAlign="TextAlign.Left" Width="140" />
                <GridColumn Field="@nameof(Descuentos_Totales.Conc_Sin_Iva)" HeaderText="Descuentos Sin IVA" TextAlign="TextAlign.Right" Width="150" Format="c2" />
                <GridColumn Field="@nameof(Descuentos_Totales.Iva)" HeaderText="IVA" TextAlign="TextAlign.Right" Width="115" Format="c2" />
                <GridColumn Field="@nameof(Descuentos_Totales.Conc_Con_Iva)" HeaderText="Descuentos con IVA" TextAlign="TextAlign.Right" Width="150" Format="c2" />
                <GridColumn Field="@nameof(Descuentos_Totales.Aplicado_Con_Iva)" HeaderText="Aplicado con IVA" TextAlign="TextAlign.Right" Width="150" Format="c2" />
                <GridColumn Field="@nameof(Descuentos_Totales.Total_Aplicado)" HeaderText="Total Aplicado" TextAlign="TextAlign.Right" Width="150" Format="c2" />
                <GridColumn Field="@nameof(Descuentos_Totales.Usuarios)" HeaderText="Usuarios" TextAlign="TextAlign.Center" Width="115" Format="n0" />
                <GridColumn HeaderText="Acciones" TextAlign="TextAlign.Left" Width="auto">
                    <Template>
                        @{
                            var data = (context as Descuentos_Totales);
                            if (data.Id_Oficina > 0 && data.Id_Oficina < 999) {
                                <div class="d-flex p-1">
                                    <button type="button" class="btn btn-primary btn-sm mx-1" data-toggle="tooltip" data-placement="top" title="Descuentos por Conceptos" disabled="@(data.Estatus != ResumenOficinaEstatus.Completado )" @onclick=@( e => DescuentosPorConceptos_Click(data) )>
                                        <i class="fa fa-bookmark" aria-hidden="true"></i>
                                    </button>
                                    <button type="button" class="btn btn-primary btn-sm mx-1" data-toggle="tooltip" data-placement="top" title="Descuentos por Autorizo" disabled="@(data.Estatus != ResumenOficinaEstatus.Completado )" @onclick=@( e => DescuentosPorAutorizo_Click(data) )>
                                        <i class="fa fa-bookmark" aria-hidden="true"></i>
                                    </button>
                                    <button type="button" class="btn btn-primary btn-sm mx-1" data-toggle="tooltip" data-placement="top" title="Descuentos por Tarifas" disabled>
                                        <i class="fa fa-bookmark" aria-hidden="true"></i>
                                    </button>
                                </div>
                            }
                        }
                    </Template>
                </GridColumn>
            </GridColumns>
        </SfGrid>
    </div>

    <!--- ****** Graficas ****** -->
    <div class="d-flex" style="grid-area: 5/1/6/2;">
        <div class="border rounded bg-white mr-1 d-flex flex-column align-items-center" style="width:50%; height:100%;">
            <SfChart @ref="graficaImportes" Title="DESCUENTOS" Width="100%" Height="100%">
                <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category"></ChartPrimaryXAxis>
                <ChartPrimaryYAxis Visible="false" LabelFormat="c2" />
                <ChartTooltipSettings Enable="true" Header="Ingresos" Format="<b>${series.name}</b> : ${point.y}" Shared="true"></ChartTooltipSettings>
                <ChartLegendSettings Visible="false"></ChartLegendSettings>
                <ChartSeriesCollection>
                    <ChartSeries DataSource="@DatosGrafica_Moneda" Name="Propios" XName="Descripcion" YName="Valor1" Type="ChartSeriesType.StackingColumn">
                        <ChartMarker>
                            <ChartDataLabel Visible="true" />
                        </ChartMarker>
                    </ChartSeries>
                </ChartSeriesCollection>
            </SfChart>
        </div>

        <div class="border rounded bg-white ml-1 d-flex flex-column align-items-center" style="width:50%; height:100%">
            <SfChart @ref="graficaMovimientos" Title="MOVIMIENTOS" Width="100%" Height="100%">
                <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category"></ChartPrimaryXAxis>
                <ChartPrimaryYAxis Visible="false" LabelFormat="n0" />
                <ChartTooltipSettings Enable="true" Header="Usuarios" Format="<b>${series.name}</b> : ${point.y}" Shared="true"></ChartTooltipSettings>
                <ChartLegendSettings Visible="false"></ChartLegendSettings>
                <ChartSeriesCollection>
                    <ChartSeries DataSource="@DatosGrafica_Usuarios" Name="Propios" XName="Descripcion" YName="Valor1" Type="ChartSeriesType.StackingColumn">
                        <ChartMarker>
                            <ChartDataLabel Visible="true" />
                        </ChartMarker>
                    </ChartSeries>
                </ChartSeriesCollection>
            </SfChart>
        </div>
    </div>

</div>

@* ****** Dialogos y ventanas secundarias ****** *@
<BusyIndicator Busy="@busyDialog" ContentText="Cargando datos...." />
<Descuentos_ConceptosVtn @ref="VtnConceptos" Fecha1="@f1" Fecha2="@f2" Subsistema="@Subsistema" Sector="@Sector" Visible="@VtnConceptos_Visible" CerrarModal="@( e => VtnConceptos_Visible = false )" />
<Descuentos_AutorizoVtn @ref="VtnAutorizo" Fecha1="@f1" Fecha2="@f2" Subsistema="@Subsistema" Sector="@Sector" Visible="@VtnAutorizo_Visible" CerrarModal="@(e => VtnAutorizo_Visible = false)" />


@code{
    private SfGrid<Descuentos_Totales> dataGrid { get; set; }
    private SfChart graficaImportes {get;set;}
    private SfChart graficaMovimientos {get;set;}

    private bool busyDialog = false;
    private DateTime f1, f2;
    private int Subsistema, Sector;
    private List<Descuentos_Totales> datosGrid { get; set; }
    public List<ChartItem> DatosGrafica_Moneda { get; set; }
    public List<ChartItem> DatosGrafica_Usuarios { get; set; }

    private Descuentos_ConceptosVtn VtnConceptos;
    private bool VtnConceptos_Visible = false;
    private Descuentos_AutorizoVtn VtnAutorizo;
    private bool VtnAutorizo_Visible = false;


    //********* Funciones  *********
    protected override void OnInitialized() {
        
        // Validar si se cuenta con la opcion
        if(!sicemService.Usuario.OpcionSistemas.Select(item => item.Id).Contains(OpcionesSistema.DESCUENTOS)){
            navigationManager.NavigateTo("/");
            return;
        }

        var _now = DateTime.Now;
        this.f1 = new DateTime(_now.Year, _now.Month, 1);
        this.f2 = new DateTime(_now.Year, _now.Month, DateTime.DaysInMonth(_now.Year, _now.Month));
        this.Subsistema = 0;
        this.Sector = 0;

        this.datosGrid = new List<Descuentos_Totales>();
        this.DatosGrafica_Moneda = new List<ChartItem>();
        this.DatosGrafica_Usuarios = new List<ChartItem>();
    }
    public void Procesar(SeleccionarFechaEventArgs e) {
        
        this.f1 = e.Fecha1;
        this.f2 = e.Fecha2;
        this.Subsistema = e.Subsistema;
        this.Sector = e.Sector;


        var enlaces = sicemService.ObtenerOficinasDelUsuario();

        datosGrid = new List<Descuentos_Totales>();
        this.DatosGrafica_Moneda = new List<ChartItem>();
        this.DatosGrafica_Usuarios = new List<ChartItem>();
        var tareas = new List<Task>();

        //*** Preparar filas
        foreach (var enlace in enlaces ){

            var datosModel = new Descuentos_Totales() {
                Estatus = ResumenOficinaEstatus.Pendiente,
                Enlace = enlace
            };
            this.datosGrid.Add(datosModel);

            var itemGrafica1 = new ChartItem() {
                Id = enlace.Id,
                Descripcion = enlace.Nombre,
                Valor1 = 0m
            };
            this.DatosGrafica_Moneda.Add(itemGrafica1);

            var itemGrafica2 = new ChartItem() {
                Id = enlace.Id,
                Descripcion = enlace.Nombre,
                Valor1 = 0m
            };
            this.DatosGrafica_Usuarios.Add(itemGrafica2);


            //*** Inicializar tarea
            tareas.Add( new Task(() => ProcesarConsulta(enlace)) );
        }

        //*** Agregar fila total
        if (enlaces.Count() > 1) {
            var datosModel = new Descuentos_Totales() {
                Estatus = Data.Contracts.ResumenOficinaEstatus.Pendiente
            };
            this.datosGrid.Add(datosModel);
        }

        tareas.ForEach(item => item.Start());

    }
    private void Procesar_Datos_Grafica(){
        var tmpList1 = new List<ChartItem>();
        foreach (var item in this.datosGrid) {
            if (item.Id_Oficina > 0 && item.Id_Oficina < 999) {
                var newItem = new ChartItem();
                newItem.Id = item.Id_Oficina;
                newItem.Descripcion = item.Oficina;
                newItem.Valor1 = item.Total_Aplicado;
                tmpList1.Add(newItem);
            }
        }
        DatosGrafica_Moneda = tmpList1;


        var tmpList2 = new List<ChartItem>();
        foreach (var item in this.datosGrid) {
            if (item.Id_Oficina > 0 && item.Id_Oficina < 999) {
                var newItem = new ChartItem();
                newItem.Id = item.Id_Oficina;
                newItem.Descripcion = item.Oficina;
                newItem.Valor1 = item.Usuarios;
                tmpList2.Add(newItem);
            }
        }
        DatosGrafica_Usuarios = tmpList2;

    }
    private void ProcesarConsulta(IEnlace enlace){
        var tmpDatos = descuentosService.ObtenerDescuentosOficina(enlace, f1, f2, Subsistema, Sector);

        //**** Esperar
        var _random = new Random();
        var _sleepTime = _random.Next(100,3000);
        System.Threading.Thread.Sleep(_sleepTime);

        //*** Actualizar data grid
        lock(datosGrid){
            var _itemGrid = this.datosGrid.Where(item => item.Id_Oficina == enlace.Id).FirstOrDefault();
            if(_itemGrid != null) {
                if (tmpDatos.Estatus == ResumenOficinaEstatus.Completado) {
                    _itemGrid.Estatus = tmpDatos.Estatus;
                    _itemGrid.Conc_Con_Iva = tmpDatos.Conc_Con_Iva;
                    _itemGrid.Iva = tmpDatos.Iva;
                    _itemGrid.Aplicado_Con_Iva = tmpDatos.Aplicado_Con_Iva;
                    _itemGrid.Conc_Sin_Iva = tmpDatos.Conc_Sin_Iva;
                    _itemGrid.Total_Aplicado = tmpDatos.Total_Aplicado;
                    _itemGrid.Usuarios = tmpDatos.Usuarios;
                }
                else {
                    _itemGrid.Estatus = ResumenOficinaEstatus.Error;
                    _itemGrid.Conc_Con_Iva = 0m;
                    _itemGrid.Iva = 0m;
                    _itemGrid.Aplicado_Con_Iva = 0m;
                    _itemGrid.Conc_Sin_Iva = 0m;
                    _itemGrid.Total_Aplicado = 0m;
                    _itemGrid.Usuarios = 0;
                }
            }
            RecalcularFilaTotal();
            dataGrid.Refresh();
        }
        

        //*** Actualizar grafica Importes
        lock(DatosGrafica_Moneda){
            var _itemG1 = this.DatosGrafica_Moneda.Where(item => item.Id == enlace.Id).FirstOrDefault();
            if(_itemG1 != null) {
                _itemG1.Valor1 = tmpDatos.Total_Aplicado;
            }
            try{
                graficaImportes.RefreshLiveData();
            }catch(Exception){}
        }

        //*** Actualizar grafica Movimientos
        lock(DatosGrafica_Usuarios){
            var _itemG2 = this.DatosGrafica_Usuarios.Where(item => item.Id == enlace.Id).FirstOrDefault();
            if (_itemG2 != null) {
                _itemG2.Valor1 = tmpDatos.Usuarios;
            }
            try {
                graficaMovimientos.RefreshLiveData();
            }
            catch (Exception){}
        }

    }
    private void RecalcularFilaTotal() {
        var _itemGrid = this.datosGrid.Where(item => item.Id_Oficina  >= 999).FirstOrDefault();
        if(_itemGrid != null) {
            var _datos = this.datosGrid.Where(item => item.Id_Oficina > 0 && item.Id_Oficina < 999).ToList();
            _itemGrid.Conc_Con_Iva = _datos.Sum(item => item.Conc_Con_Iva);
            _itemGrid.Iva = _datos.Sum(item => item.Iva);
            _itemGrid.Aplicado_Con_Iva = _datos.Sum(item => item.Aplicado_Con_Iva);
            _itemGrid.Conc_Sin_Iva = _datos.Sum(item => item.Conc_Sin_Iva);
            _itemGrid.Total_Aplicado = _datos.Sum(item => item.Total_Aplicado);
            _itemGrid.Usuarios = _datos.Sum(item => item.Usuarios);
        }
    }
    private async Task ExportarExcel(){
        await this.dataGrid.ExportToExcelAsync();
    }

    //********* Funciones Ventanas Secundarias  *********
    private async Task DescuentosPorConceptos_Click(Descuentos_Totales data){
        if (VtnConceptos_Visible) {
            return;
        }
        this.busyDialog = true;
        await Task.Delay(200);
        var tmpdata = descuentosService.ObtenerDescuentosConceptos(data.Enlace, this.f1, this.f2).ToArray();
        if(tmpdata == null) {
            Toaster.Add("Hubo un error al procesar la petici�n, int�ntelo mas tarde.", MatToastType.Warning );
        }
        else {
            VtnConceptos_Visible = true;
            var tmpOfi = sicemService.ObtenerEnlaces(data.Id_Oficina).FirstOrDefault();
            VtnConceptos.Titulo = $"{tmpOfi.Oficina.ToUpper()} - DESCUENTOS POR CONCEPTOS";
            await VtnConceptos.Inicializar(tmpdata, data.Enlace);
        }
        await Task.Delay(200);
        this.busyDialog = false;
    }
    private async Task DescuentosPorAutorizo_Click(Descuentos_Totales data) {
        if (VtnAutorizo_Visible) {
            return;
        }
        this.busyDialog = true;
        await Task.Delay(200);
        var tmpdata = descuentosService.ObtenerDescuentosAutorizo(data.Enlace, this.f1, this.f2);
        if (tmpdata == null) {
            Toaster.Add("Hubo un error al procesar la petici�n, int�ntelo mas tarde.", MatToastType.Warning);
        }
        else {
            VtnAutorizo_Visible = true;
            var tmpOfi = sicemService.ObtenerEnlaces(data.Id_Oficina).FirstOrDefault();
            VtnAutorizo.Titulo = $"{tmpOfi.Oficina.ToUpper()} - DESCUENTOS POR AUTORIZACION";
            await VtnAutorizo.Inicializar(tmpdata, data.Enlace);
        }
        await Task.Delay(200);
        this.busyDialog = false;
    }


}