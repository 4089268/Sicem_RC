@using Syncfusion.Blazor
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Grids
@using SICEM_Blazor.Descuentos.Models
@inject IJSRuntime JSRuntime
@inject DescuentosService descuentosService 

@if (Visible){
    <VentanaSecundaria Titulo="@Titulo" CerrarVentana="@CerrarModal" Filas="@(new double[] {50, 360, 240 })" Columnas="@(new double[] { 1020 })">
        <Content>
            <div class="m-1 p-2 border rounded bg-white" style="grid-row: 1/2; grid-column: 1/2;">
                <div class="w-100 d-flex align-items-center">
                    <MatButton Class="ml-1 mr-2" Raised="true" Style="height:2.5rem;" OnClick="@GenerarExcel">Exportar Excel <i class="fa fa-file-excel-o ml-2" aria-hidden="true"></i> </MatButton>
                    <MatButton Class="mr-2" Raised="true" Style="height:2.5rem;" Disabled="true">Generar Reporte <i class="fa fa-file-pdf-o ml-2" aria-hidden="true"></i></MatButton>
                </div>
            </div>

            <div class="m-1 p-2 border rounded bg-white" style="grid-row: 2/3; grid-column: 1/2;">
                <SfGrid @ref="dataGrid" DataSource="@datosGrid" AllowSorting="true" AllowFiltering="false" AllowExcelExport="true" AllowPdfExport="true" Height="100%" Width="auto" EnableHover="true">
                    <GridColumns>
                        <GridColumn HeaderText="" TextAlign="TextAlign.Center" Width="55">
                            <Template>
                                @{
                                    var data = (context as Descuentos_Autorizo);
                                    <button type="button" class="btn btn-primary btn-sm" data-toggle="tooltip" data-placement="top" title="Ver detalle" @onclick="@( e => MostrarVentanaDetalle(data))">
                                        <i class="fa fa-th" aria-hidden="true"></i>
                                    </button>

                                }
                            </Template>
                        </GridColumn>
                        <GridColumn Field="@nameof(Descuentos_Autorizo.Autorizo)" HeaderText="Autorizo" TextAlign="TextAlign.Left" Width="260" />
                        <GridColumn Field="@nameof(Descuentos_Autorizo.Subtotal)" HeaderText="Subtotal" TextAlign="TextAlign.Right" Width="140" Format="c2" />
                        <GridColumn Field="@nameof(Descuentos_Autorizo.Iva)" HeaderText="Iva" TextAlign="TextAlign.Right" Width="140" Format="c2" />
                        <GridColumn Field="@nameof(Descuentos_Autorizo.Total)" HeaderText="Total" TextAlign="TextAlign.Right" Width="140" Format="c2" />
                        <GridColumn Field="@nameof(Descuentos_Autorizo.Usuarios)" HeaderText="Usuarios" TextAlign="TextAlign.Center" Width="140" Format="n0" />
                    </GridColumns>
                </SfGrid>
            </div>

            <div class="m-1 p-2 border rounded bg-white" style="grid-row: 3/4; grid-column: 1/2;">
                <SfChart Title="" SubTitle="Descuentos por Autorizacion" @ref="grafiaIngresos" Width="100%" Height="224">
                    <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category" Interval="1" Visible="true" LabelFormat="c">
                    </ChartPrimaryXAxis>
                    <ChartPrimaryYAxis Title="" Visible="false" LabelFormat="c2" />
                    <ChartTooltipSettings Enable="true" Header="" Shared="true" Format="${series.name} ${point.x} : ${point.y}"></ChartTooltipSettings>
                    <ChartLegendSettings Visible="false" Position="LegendPosition.Right"></ChartLegendSettings>
                    <ChartZoomSettings EnableMouseWheelZooming="false" EnablePinchZooming="false" EnableSelectionZooming="true"></ChartZoomSettings>
                    <ChartArea>
                        <ChartAreaBorder Width="0"></ChartAreaBorder>
                    </ChartArea>
                    <ChartSeriesCollection>
                        <ChartSeries XName="Descripcion" DataSource="@itemsGrafica" YName="Valor1" Name="Descontado" Type="ChartSeriesType.Column">
                            <ChartMarker>
                                <ChartDataLabel Visible="true" />
                            </ChartMarker>
                        </ChartSeries>
                    </ChartSeriesCollection>
                </SfChart>
            </div>

        </Content>
    </VentanaSecundaria>
    

    <BusyIndicator Busy="@busyDialog" ContentText="Cargando datos...." />
    <Descuentos_AutorizoDetalleVtn @ref="vtn_autorizoDet" Visible="@vtn_autorizoDet_visible" CerrarModal="@(()=> vtn_autorizoDet_visible = false)" Fecha1="@Fecha1" Fecha2="@Fecha2" />

}

@code {

    [Parameter] public bool Visible { get; set; }
    [Parameter] public EventCallback CerrarModal { get; set; }
    [Parameter] public DateTime Fecha1 { get; set; }
    [Parameter] public DateTime Fecha2 { get; set; }
    [Parameter] public int Subsistema { get; set; }
    [Parameter] public int Sector { get; set; }
    public string Titulo = "DESCUENTOS POR AUTORIZACION";
    private IEnlace enlaceSeleccionado;

    SfGrid<Descuentos_Autorizo> dataGrid;
    SfChart grafiaIngresos;
    public List<Descuentos_Autorizo> datosGrid;
    public List<ChartItem> itemsGrafica = new List<ChartItem>();
    private bool busyDialog = false, vtn_autorizoDet_visible = false;
    Descuentos_AutorizoDetalleVtn vtn_autorizoDet;


    //"******** Funciones ********"
    private async Task Cerrar_Modal() {
        this.datosGrid = new List<Descuentos_Autorizo>();
        await CerrarModal.InvokeAsync("");
    }
    public async Task Inicializar(IEnumerable<Descuentos_Autorizo> datos, IEnlace enlace) {
        enlaceSeleccionado = enlace;
        this.datosGrid = datos.ToList();
        if (datosGrid.Count() > 0) {
            ProcesarDatosGrafica();
        }
        await Task.Delay(100);
    }
    private void ProcesarDatosGrafica() {
        itemsGrafica = new List<ChartItem>();
        foreach (Descuentos_Autorizo recaItem in this.datosGrid) {
            itemsGrafica.Add(new ChartItem() {
                Descripcion = recaItem.Autorizo,
                Valor1 = recaItem.Total
            });
        }
    }
    private async Task GenerarExcel() {
        await this.dataGrid.ExcelExport(new ExcelExportProperties {
            FileName = string.Format("sicem_{0}.xlsx", Guid.NewGuid().ToString().Replace("-", ""))
        });
    }
    private async Task GenerarPdf() {
        string titulo = string.Format("Ingresos por Conceptos del {0} al {1}", this.Fecha1.ToString("dd/MM/yyyy"), this.Fecha2.ToString("dd/MM/yyyy"));
        List<PdfHeaderFooterContent> xconts = new List<PdfHeaderFooterContent>();
        xconts.Add(
            new PdfHeaderFooterContent() {
                Type = ContentType.Text,
                Value = titulo,
                Position = new PdfPosition() { X = 10, Y = 10 },
                Style = new PdfContentStyle() {
                    TextBrushColor = "#000000",
                    FontSize = 13
                }
            }
        );

        await this.dataGrid.PdfExport(new PdfExportProperties {
            PageOrientation = PageOrientation.Landscape,
            Header = new PdfHeader {
                Contents = xconts
            },
            FileName = string.Format("sicem_IngresosxDias{0}.pdf", Guid.NewGuid().ToString().Replace("-", ""))
        });
    }
    private async Task MostrarVentanaDetalle(Descuentos_Autorizo e) {
        if (vtn_autorizoDet_visible){ return; }

        busyDialog = true;
        await Task.Delay(100);

        var tmpData = descuentosService.ObtenerDescuentosAutorizoDetalle(enlaceSeleccionado, Fecha1, Fecha2, e.CVE);
        if (tmpData == null) {
            busyDialog = false;
            return;
        }
        if (tmpData.Length <= 0) {
            busyDialog = false;
            return;
        }

        vtn_autorizoDet_visible = true;
        vtn_autorizoDet.Titulo = $"DESCUENTOS REALIZADOS POR {e.Autorizo.ToUpper()}";
        vtn_autorizoDet.Inicializar(enlaceSeleccionado, tmpData);

        await Task.Delay(100);
        busyDialog = false;
    }

}