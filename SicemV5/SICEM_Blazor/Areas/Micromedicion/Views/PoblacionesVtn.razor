@using SICEM_Blazor.Micromedicion.Models
@inject IMatToaster Toaster
@inject PadronService padronService

@if(Show){
<VentanaSecundaria Titulo="@Titulo" CerrarVentana="@CerrarModal" Filas="@(new double[]{50, 50, 570})" Columnas="@(new double[]{.65,.25})">
    <Content>

        <div class="d-flex align-items-center m-1 p-2 border rounded bg-white" style="grid-row: 1/2; grid-column: 1/3;">
            <MatTabBar @bind-ActiveIndex="@tabSelected" @onchange="@((e) => ProcesarDatosGrafica()  )" >
                <MatTabLabel Class="fa-2x">Todos</MatTabLabel>
                <MatTabLabel Class="fa-2x">Urbano</MatTabLabel>
                <MatTabLabel Class="fa-2x">Rural</MatTabLabel>
            </MatTabBar>
        </div>

        <div class="m-1 py-2 border rounded bg-white d-flex align-items-center" style="grid-row: 2/3; grid-column: 1/3;">
            <MatButton Class="ml-2" Raised="true" Style="height:2.5rem;" OnClick="@GenerarExcel">
                <span>Exportar Excel</span>
                <i class="fa fa-file-excel-o ml-2" aria-hidden="true"></i>
            </MatButton>
        </div>

        <div class="d-flex flex-row m-1 p-2 border rounded bg-white" style="grid-row: 3/4; grid-column: 1/2;">
            <SfGrid @ref="dataGrid" DataSource="@datosGrid" AllowSorting="true" AllowResizing="true"
                    AllowFiltering="false" AllowExcelExport="true" AllowPdfExport="true" Height="100%" Width="100%" EnableHover="true">
                <GridPageSettings PageSize="1000"></GridPageSettings>
                <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Row" Type="Syncfusion.Blazor.Grids.SelectionType.Single" EnableToggle="true"></GridSelectionSettings>
                <GridEvents RowSelected="DataGrid_SelectedRow" TValue="MicromedicionPoblacion"></GridEvents>
                <GridColumns>
                    <GridColumn Field="@nameof(MicromedicionPoblacion.Habitantes)" HeaderText="Habitantes" TextAlign="TextAlign.Center" Width="120" Format="n0" />
                    <GridColumn Field="@nameof(MicromedicionPoblacion.Poblacion)" HeaderText="Poblacion" TextAlign="TextAlign.Left" Width="240" />
                    <GridColumn Field="@nameof(MicromedicionPoblacion.EsRural)" HeaderText="Es Rural" TextAlign="TextAlign.Center" Width="90" DisplayAsCheckBox="true" />
                    <GridColumn Field="@nameof(MicromedicionPoblacion.Reales)" HeaderText="Reales" TextAlign="TextAlign.Center" Width="140" Format="n0" />
                    <GridColumn Field="@nameof(MicromedicionPoblacion.Promedios)" HeaderText="Promedios" TextAlign="TextAlign.Center" Width="140" Format="n0" />
                    <GridColumn Field="@nameof(MicromedicionPoblacion.Medidos)" HeaderText="Medidos" TextAlign="TextAlign.Center" Width="140" Format="n0" />
                    <GridColumn Field="@nameof(MicromedicionPoblacion.Fijos)" HeaderText="Fijos" TextAlign="TextAlign.Center" Width="140" Format="n0" />
                    <GridColumn Field="@nameof(MicromedicionPoblacion.Total)" HeaderText="Total" TextAlign="TextAlign.Center" Width="140" Format="n0" />
                </GridColumns>
            </SfGrid>
        </div>

        <div class="m-1 p-2 border rounded bg-white d-flex flex-column" style="grid-row: 3/4; grid-column: 2/3;">
            <div class="h-100">
                <SfAccumulationChart @ref="chart" Title="Micromedicion por tipo de calculo">
                    <AccumulationChartSeriesCollection>
                        <AccumulationChartSeries DataSource="@ItemsGrafica1" XName="Descripcion" YName="Valor1">
                            <AccumulationDataLabelSettings Visible="true" Name="AccumulatioText" Position="AccumulationLabelPosition.Outside">
                                <AccumulationChartConnector Type="ConnectorType.Curve" Length="20px" />
                            </AccumulationDataLabelSettings>
                        </AccumulationChartSeries>
                    </AccumulationChartSeriesCollection>
                    <AccumulationChartLegendSettings Visible="true" Position="LegendPosition.Bottom"></AccumulationChartLegendSettings>
                </SfAccumulationChart>
            </div>
        </div>

    </Content>
</VentanaSecundaria>
}

<BusyIndicator Busy="@busyDialog" ContentText="Cargando datos...." />

@code {
    [CascadingParameter]
    protected IEnlace EnlaceSeleccionado { get; set; }
    
    [Parameter]
    public EventCallback CerrarModal { get; set; }
    
    [Parameter]
    public DateTime Fecha1 { get; set; }
    
    [Parameter]
    public DateTime Fecha2 { get; set; }

    [Parameter]
    public bool Show { get; set; } = false;

    public string Titulo = "Micromedicion por poblacion";
    
    SfGrid<MicromedicionPoblacion> dataGrid;
    SfAccumulationChart chart;

    public List<MicromedicionPoblacion> _datosGrid {get;set;}
    public List<MicromedicionPoblacion> datosGrid {
        get {
            var _tmpData = new List<MicromedicionPoblacion>();
            switch(tabSelected){
                case 1:
                    _tmpData.AddRange( _datosGrid.Where(item => item.EsRural != true).ToList() );
                    break;

                case 2:
                    _tmpData.AddRange( _datosGrid.Where(item => item.EsRural == true).ToList() );
                    break; 

                default:
                    _tmpData.AddRange( _datosGrid.ToList() );
                    break; 
            }

            var totalRow = new MicromedicionPoblacion(999, " TOTAL"){
                EsRural = false,
                Reales = _tmpData.Sum( item => item.Reales),
                Promedios =  _tmpData.Sum( item => item.Promedios),
                Medidos = _tmpData.Sum( item => item.Medidos),
                Fijos = _tmpData.Sum( item => item.Fijos),
                Total = _tmpData.Sum( item => item.Total),
                Habitantes = _tmpData.Sum( item => item.Habitantes),
            };
            _tmpData.Add( totalRow );
            return _tmpData;
        }
    }
    public List<ChartItem> ItemsGrafica1 { get; set; }
    private bool busyDialog = false;
    
    private int tabSelected = 0;
    

    private async Task Cerrar_Modal() {
        this._datosGrid.Clear();
        await CerrarModal.InvokeAsync("");
    }
    
    public void Inicializar( IEnumerable<MicromedicionPoblacion> datos) {
        this._datosGrid = datos.ToList();
        ProcesarDatosGrafica();
        StateHasChanged();
    }

    private void ProcesarDatosGrafica(){
        // Tarifa
        this.ItemsGrafica1 = new List<ChartItem>{
            new ChartItem {
                Descripcion = "Reales",
                Valor1 = this.datosGrid.Where(item => item.IdPoblacion < 999).Sum( item => item.Reales),
                AccumulatioText = "Reales"
            },
            new ChartItem {
                Descripcion = "Promedios",
                Valor1 = this.datosGrid.Where(item => item.IdPoblacion < 999).Sum( item => item.Medidos),
                AccumulatioText = "Promedios"
            },
            new ChartItem {
                Descripcion = "Fijos",
                Valor1 = this.datosGrid.Where(item => item.IdPoblacion < 999).Sum( item => item.Fijos),
                AccumulatioText = "Fijos"
            }
        };

    }
    
    private async Task GenerarExcel() {
        await this.dataGrid.ExcelExport(new ExcelExportProperties {
            FileName = string.Format("sicem_{0}.xlsx", Guid.NewGuid().ToString().Replace("-", ""))
        });
    }
    
    private void DataGrid_SelectedRow(RowSelectEventArgs<MicromedicionPoblacion> args) {
       //
    }
}