@using SICEM_Blazor.Recaudacion.Models
@using SICEM_Blazor.Recaudacion.Data
@inject IRecaudacionService RecaudacionService
@inject IMatToaster MatToaster

@if(Visible){
    <VentanaSecundaria Titulo="@Titulo" Columnas="@ColumnasTemplate" Filas="@FilasTemplate" CerrarVentana="@CerrarModal">
        <Content>

            @*
            <div class="border rounded p-2 mb-2 bg-white">
                <MatTabBar @bind-ActiveIndex="@tabIndex" >
                    <MatTabLabel Class="fa-2x">Todos</MatTabLabel>
                    <MatTabLabel Class="fa-2x">Urbano</MatTabLabel>
                    <MatTabLabel Class="fa-2x">Rural</MatTabLabel>
                </MatTabBar>
            </div>
            *@

            <div class="d-flex align-items-center border rounded p-2 mb-2 bg-white">
                <div class="button bg-success px-3 py-2" @onclick="OnExportExcel_Click" >
                    <i class="fa fa-file-excel mr-2 me-2"></i>
                    <span>Exportar Historial</span>
                </div>
            </div>

            <div class="border rounded p-2 mb-2 bg-white">
                <SfGrid @ref="DataGrid" DataSource="@DatosGrid" AllowExcelExport="true" AllowResizing="true" Width="100%" Height="100%">
                    <GridColumns>
                        @*
                        <GridColumn HeaderText="" TextAlign="TextAlign.Left" Width="40">
                            <Template>
                                @{
                                    var data = (context as RecaudacionIngresosxPoblaciones);
                                    <div class="d-flex p-1">
                                        <button type="button" class="btn btn-primary btn-sm mx-1" data-toggle="tooltip" data-placement="top" title="Mostrar Colonias" @onclick=@( e => MostrarColonias_Click(data) ) >
                                            <i class="fa fa-bookmark" aria-hidden="true"></i>
                                        </button>
                                        <button type="button" class="btn btn-primary btn-sm mx-1" data-toggle="tooltip" data-placement="top" title="Ingresos por Conceptos" @onclick=@( e => MostrarIngresosPorConceptos(data) ) >
                                            <i class="fa fa-dollar" aria-hidden="true"></i>
                                        </button>
                                    </div>
                                }
                            </Template>
                        </GridColumn>
                        *@
                        <GridColumn Field="@nameof(RecaudacionIngresosxPoblaciones.Localidad)"  HeaderText="Localidad" TextAlign="TextAlign.Left" Width="260" />
                        <GridColumn Field="@nameof(RecaudacionIngresosxPoblaciones.Cobrado)"    HeaderText="Ingresos Cobrados" TextAlign="TextAlign.Right" Width="140" Format="c2" />
                        <GridColumn Field="@nameof(RecaudacionIngresosxPoblaciones.Recibos)"    HeaderText="Recibos" TextAlign="TextAlign.Center" Width="140" Format="n0" />
                    </GridColumns>
                </SfGrid>
            </div>

        </Content>
    </VentanaSecundaria>

    <Recaudacion_ColoniasVtn @ref="RecaudacionColoniasVtn" Enlace="@Enlace" Desde="@Desde" Hasta="@Hasta" Subsistema="@Subsistema" Sector="@Sector" Visible="@RecaudacionColonias_visible" OnClose="@( e => RecaudacionColonias_visible = false)" Titulo="@($"{Enlace.Nombre} - Recaudacion Por Colonias")"/>
    <Recaudacion_IngresosxDias_detalle_conceptos @ref="ConceptosLocalidadesVtn" MostrarVentana="@ConceptosLocalidades_visible" CerrarModal="@(e => ConceptosLocalidades_visible = false)" />

}
<BusyIndicator Busy="@busyDialog" ContentText="Cargando datos..." />

@code
{
    [Parameter]
    public EventCallback OnClose {get;set;}
    
    [Parameter]
    public bool Visible {get;set;}
    
    [Parameter]
    public DateTime Desde {get;set;}
    
    [Parameter]
    public DateTime Hasta {get;set;}
    
    [Parameter]
    public int Subsistema {get;set;}
    
    [Parameter]
    public int Sector {get;set;}
    
    public IEnlace Enlace {get;set;}
    public string Titulo {get;set;} = "Recaudacion Por Localidades";

    private SfGrid<RecaudacionIngresosxPoblaciones> DataGrid {get;set;}
    private List<RecaudacionIngresosxPoblaciones> DatosGrid {get;set;}

    private double[] ColumnasTemplate = new double[]{780};
    private double[] FilasTemplate = new double[]{ 50, 620};

    private bool busyDialog = false, RecaudacionColonias_visible = false, ConceptosLocalidades_visible = false;
    private Recaudacion_ColoniasVtn RecaudacionColoniasVtn {get;set;}
    private Recaudacion_IngresosxDias_detalle_conceptos ConceptosLocalidadesVtn;

    private int tabIndex = 0;

    public void Inicializar(IEnumerable<RecaudacionIngresosxPoblaciones> datos, IEnlace enlace)
        {
        this.Enlace = enlace;
        this.DatosGrid = datos.ToList();

        Titulo=$"{Enlace.Nombre} - Recaudacion Por Localidades";
    }
    
    private async Task CerrarModal()
    {
        await OnClose.InvokeAsync(null);
    }

    private async Task OnExportExcel_Click()
    {
        var _guid = Guid.NewGuid().ToString().Replace("-","").Substring(0,10);
        var _titulo = Titulo.Replace(" - ",".").Replace(" ","_").ToString();
        var _p = new ExcelExportProperties(){
            FileName = $"{_titulo}-{_guid}.xlsx",
            IncludeHiddenColumn = true
        };
        await DataGrid.ExportToExcelAsync(_p);
    }

    private async Task MostrarColonias_Click(RecaudacionIngresosxPoblaciones context)
    {
        // if(RecaudacionColonias_visible){
        //     return;
        // }
        // busyDialog = true;
        // await Task.Delay(100);
        // var _datos = RecaudacionService.ObtenerRecaudacionColonias(Enlace, Desde, Hasta, Subsistema, Sector, context.Id_localidad).ToList();
        // if(_datos.Count() > 0){
        //     RecaudacionColonias_visible = true;
        //     RecaudacionColoniasVtn.Inicializar(_datos, context.Id_localidad, context.Localidad);
        // }else{
        //     MatToaster.Add("Error al realizar la consulta", MatToastType.Danger);
        // }
        // await Task.Delay(100);
        // busyDialog = false;
        await Task.CompletedTask;
        throw new NotImplementedException();
    }

    private async Task MostrarIngresosPorConceptos(RecaudacionIngresosxPoblaciones context)
    {
        // if(ConceptosLocalidades_visible == true){
        //     return;
        // }
        // var idLocalidad = context.Id_localidad;
        // var results = RecaudacionService.ObtenerIngresosConceptosPorLocalidadColonia(Enlace, Desde, Hasta, Subsistema, Sector, idLocalidad, 0);
        // ConceptosLocalidades_visible = true;
        // ConceptosLocalidadesVtn.Inicializar(results, context.Localidad);
        await Task.CompletedTask;
        throw new NotImplementedException();
    }

}