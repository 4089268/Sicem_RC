@page "/Recaudacion"
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Charts
@using System.Threading.Tasks
@using SICEM_Blazor.Recaudacion.Models
@using SICEM_Blazor.Recaudacion.Data
@inject NavigationManager navigationManager
@inject IMatToaster Toaster
@inject IRecaudacionService recaudacionService
@inject SicemService sicemService

<div class="layout-page1">

    <div class="title-page" style="grid-area:1/1/2/2;">CONSULTA DE INGRESOS</div>

    <div class="border rounded bg-white px-2 d-flex align-items-center" style="grid-area:2/1/3/2;">
        <SeleccionarFecha ProcesarParam="@Procesar" MostrarPeriodos="false" />
    </div>

    @* ****** Acciones ****** *@
    <div class="border rounded bg-white d-flex align-items-center" style="grid-area:3/1/4/2;">
        <MatButton Class="mx-2" style="min-width: 130px;" Raised="true" @onclick="ExportarExcel_Click">Exportar Excel</MatButton>
        <MatButton Class="mx-2" style="min-width: 130px;" Raised="true" Disabled="true">Generar Reporte</MatButton>
    </div>

    @* ****** DataGrid ****** *@
    <div class="border rounded bg-white p-2 d-flex" style="grid-area:4/1/5/2;">
        <SfGrid @ref="dataGrid" DataSource="@datosRecaudacion" TValue="Recaudacion_Resumen" AllowResizing="true" AllowSorting="true" AllowFiltering="false"
                AllowExcelExport="true" Height="100%" Width="100%" EnableHover="true">
            <GridColumns>
                <GridColumn HeaderText="" TextAlign="TextAlign.Center" Width="40">
                    <Template>
                        @{
                            var data = (context as Recaudacion_Resumen);
                            if(data.Id > 0 && data.Id < 999) {
                                @switch (data.Estatus) {

                                    case 1:
                                        <i class="fas fa-check-circle" style="color:green; font-size:1.5rem;"></i>
                                        break;

                                    case 2:
                                        <i class="fas fa-exclamation-circle" style="color:red; font-size:1.5rem;"></i>
                                        break;

                                    default:
                                        <div class="spinner-border p-2" role="status"> </div>
                                        break;
                                }
                            }
                        }
                    </Template>
                </GridColumn>
                <GridColumn Field="@nameof(Recaudacion_Resumen.Oficina)" HeaderText="Oficina" TextAlign="TextAlign.Left" Width="170" />
                <GridColumn Field="@nameof(Recaudacion_Resumen.SubTotal)" HeaderText="Subtotal" TextAlign="TextAlign.Right" Width="125" Format="c2" />
                <GridColumn Field="@nameof(Recaudacion_Resumen.Iva)" HeaderText="IVA" TextAlign="TextAlign.Right" Width="125" Format="c2" />
                <GridColumn Field="@nameof(Recaudacion_Resumen.Total)" HeaderText="Total" TextAlign="TextAlign.Right" Width="125" Format="c2" />

                <GridColumn Field="@nameof(Recaudacion_Resumen.UsuariosFact)" HeaderText="Usu Facturados" TextAlign="TextAlign.Center" Width="115" Format="n0" />
                <GridColumn Field="@nameof(Recaudacion_Resumen.UsuariosCobrado)" HeaderText="Usu Cobrados" TextAlign="TextAlign.Center" Width="115" Format="n0" />
                <GridColumn Field="@nameof(Recaudacion_Resumen.PorCobrado)" HeaderText="% Usu Cobrados" TextAlign="TextAlign.Center" Width="115" Visible="false" />
                <GridColumn HeaderText="% Usu Cobrados" TextAlign="TextAlign.Center" Width="115">
                    <Template>
                        @{
                            var data = (context as Recaudacion_Resumen);
                            <div class="d-flex justify-content-center">
                                @data.PorCobrado
                                <span class="px-2">%</span>
                            </div>
                        }

                    </Template>
                </GridColumn>
                <GridColumn Field="@nameof(Recaudacion_Resumen.RecibosPropios)" HeaderText="Recibos Propios" TextAlign="TextAlign.Right" Width="115" Format="n0" />
                <GridColumn Field="@nameof(Recaudacion_Resumen.RecibosOtros)" HeaderText="Recibos Otros" TextAlign="TextAlign.Center" Width="115" Format="n0" />

                <GridColumn HeaderText="Acciones" TextAlign="TextAlign.Left" Width="230">
                    <Template>
                        @{
                            var data = (context as Recaudacion_Resumen);
                            if (data.Id > 0 && data.Id < 90) {
                                <div class="d-flex p-1">
                                    <button type="button" class="btn btn-primary btn-sm mx-1" data-toggle="tooltip" data-placement="top" title="Analitico" disabled="@(data.Estatus != 1 )" @onclick=@( e => Analitico_Click(data) )>
                                        <i class="fa fa-bookmark" aria-hidden="true"></i>
                                    </button>
                                    <button type="button" class="btn btn-primary btn-sm mx-1" data-toggle="tooltip" data-placement="top" title="Rezago" disabled="@(data.Estatus != 1 )" @onclick=@( e => Rezago_Click(data) )>
                                        <i class="fa fa-bookmark" aria-hidden="true"></i>
                                    </button>
                                    <button type="button" class="btn btn-primary btn-sm mx-1" data-toggle="tooltip" data-placement="top" title="Ingresos por Dias" disabled="@(data.Estatus != 1 )" @onclick=@( e => IngresosDias_Click(data) )>
                                        <i class="fa fa-bookmark" aria-hidden="true"></i>
                                    </button>
                                    <button type="button" class="btn btn-primary btn-sm mx-1" data-toggle="tooltip" data-placement="top" title="Ingresos por Cajas" disabled="@(data.Estatus != 1 )" @onclick=@( e => IngresosCajas_Click(data) )>
                                        <i class="fa fa-bookmark" aria-hidden="true"></i>
                                    </button>
                                    @* <button type="button" class="btn btn-primary btn-sm mx-1" data-toggle="tooltip" data-placement="top" title="Ingreso por Conceptos" disabled="@(data.Estatus != 1 )" @onclick=@( e => IngresosConceptos_Click(data) )>
                                        <i class="fa fa-bookmark" aria-hidden="true"></i>
                                    </button>
                                    <button type="button" class="btn btn-primary btn-sm mx-1" data-toggle="tooltip" data-placement="top" title="Ingresos por Tipo de Usuario" disabled="@(data.Estatus != 1 )" @onclick=@( e => IngresosTipoUsuarios_Click(data) )>
                                        <i class="fa fa-bookmark" aria-hidden="true"></i>
                                    </button> *@
                                    <button type="button" class="btn btn-primary btn-sm mx-1" data-toggle="tooltip" data-placement="top" title="Ingresos por Localidades" disabled="@(data.Estatus != 1 )" @onclick=@( e => IngresosPoPoblacion_Click(data) )>
                                        <i class="fa fa-bookmark" aria-hidden="true"></i>
                                    </button>
                                    <button type="button" class="btn btn-primary btn-sm mx-1" data-toggle="tooltip" data-placement="top" title="Top Ingresos Altos" disabled="@(data.Estatus != 1 )" @onclick=@( e => IngresosAltos_Click(data) )>
                                        <i class="fa fa-bookmark" aria-hidden="true"></i>
                                    </button>
                                    <button type="button" class="btn btn-primary btn-sm mx-1" data-toggle="tooltip" data-placement="top" title="Ingresos por Formas de Pago" disabled="@(data.Estatus != 1 )" @onclick=@( e => IngresosFormasdePago_Click(data) )>
                                        <i class="fa fa-bookmark" aria-hidden="true"></i>
                                    </button>
                                    <button type="button" class="btn btn-primary btn-sm mx-1" data-toggle="tooltip" data-placement="top" title="Ingresos por Conceptos y Tipos de Usuarios" disabled="@(data.Estatus != 1 )" @onclick=@( e => IngresosPorConceptosTiposUsuarios(data) )>
                                        <i class="fa fa-bookmark" aria-hidden="true"></i>
                                    </button>
                                </div>
                            }
                        }
                    </Template>
                </GridColumn>
            </GridColumns>
        </SfGrid>
    </div>

    <!--- ****** Graficas ****** -->
    <div class="d-flex" style="grid-area:5/1/6/2;">
        <div class="border rounded bg-white mr-1 d-flex flex-column align-items-center" style="width:50%; height:100%;">
            <SfChart @ref="graficaIngresos" Title="INGRESOS" Height="100%" Width="100%">
                <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category"></ChartPrimaryXAxis>
                <ChartPrimaryYAxis Visible="false" LabelFormat="c2" />
                <ChartTooltipSettings Enable="true" Header="Ingresos" Format="<b>${series.name}</b> : ${point.y}" Shared="true"></ChartTooltipSettings>
                <ChartSeriesCollection>
                    <ChartSeries DataSource="@DatosGrafica_Ingresos" Name="Cobrados" XName="Descripcion" YName="Valor1" Type="ChartSeriesType.StackingColumn">
                        <ChartMarker>
                            <ChartDataLabel Visible="true" Position="Syncfusion.Blazor.Charts.LabelPosition.Outer" />
                        </ChartMarker>
                    </ChartSeries>
                </ChartSeriesCollection>
            </SfChart>
        </div>
        
        <div class="border rounded bg-white ml-1 d-flex flex-column align-items-center" style="width:50%; height:100%;">
            <SfChart @ref="graficaUsuarios" Title="USUARIOS">
                <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category"></ChartPrimaryXAxis>
                <ChartPrimaryYAxis Visible="false" LabelFormat="n0" />
                <ChartTooltipSettings Enable="true" Header="Usuarios" Format="<b>${series.name}</b> : ${point.y}" Shared="true"></ChartTooltipSettings>
                <ChartSeriesCollection>
                    <ChartSeries DataSource="@DatosGrafica_Usuarios" Name="Usuarios Cobrados" XName="Descripcion" YName="Valor1" Type="ChartSeriesType.StackingColumn">
                        <ChartMarker>
                            <ChartDataLabel Visible="true" Position="Syncfusion.Blazor.Charts.LabelPosition.Outer" />
                        </ChartMarker>
                    </ChartSeries>
                </ChartSeriesCollection>
            </SfChart>
        </div>
    </div>

</div>


@* ****** Dialogos y ventanas secundarias ****** *@
<BusyIndicator Busy="@busyDialog" ContentText="Cargando datos...." />
<Recaudacion_IngresosAnalitico @ref="VtnAnalitico" Fecha1="@f1" Fecha2="@f2" Subsistema="@Subsistema" Sector="@Sector" MostrarVentana="@VtnAnalitico_visible" CerrarModal="@( e => VtnAnalitico_visible = false )" />
<Recaudacion_IngresosRezago @ref="VtnRezago" Fecha1="@f1" Fecha2="@f2" Subsistema="@Subsistema" Sector="@Sector" MostrarVentana="@VtnRezago_visible" CerrarModal="@(e => VtnRezago_visible = false)" />
<Recaudacion_IngresosxDias @ref="VtnDias" Fecha1="@f1" Fecha2="@f2" Subsistema="@Subsistema" Sector="@Sector" MostrarVentana="VtnDias_visible" CerrarModal="(e => VtnDias_visible = false)" />
<Recaudacion_IngresosxCajas @ref="VtnCajas" Fecha1="@f1" Fecha2="@f2" Subsistema="@Subsistema" Sector="@Sector" MostrarVentana="VtnCajas_visible" CerrarModal="(e => VtnCajas_visible = false)" />
<Recaudacion_IngresosConceptos @ref="VtnConceptos" Fecha1="@f1" Fecha2="@f2" Subsistema="@Subsistema" Sector="@Sector" MostrarVentana="VtnConceptos_visible" CerrarModal="(e => VtnConceptos_visible = false)" />
<Recaudacion_IngresosTipoUsuario @ref="VtnTiposUsuarios" Fecha1="@f1" Fecha2="@f2" Subsistema="@Subsistema" Sector="@Sector" MostrarVentana="VtnTiposUsuarios_Visible" CerrarModal="(e => VtnTiposUsuarios_Visible = false)" />
<Recaudacion_LocalidadesVtn @ref="VtnPoblaciones" Desde="@f1" Hasta="@f2" Subsistema="@Subsistema" Sector="@Sector" Visible="VtnPoblaciones_Visible" OnClose="(e => VtnPoblaciones_Visible = false)" />
<Recaudacion_IngresosPagosMayoresVtn @ref="VtnPagosMayores" Fecha1="@f1" Fecha2="f2" Subsistema="@Subsistema" Sector="@Sector" MostrarVentana="VtnPagosMayores_Visible" CerrarModal="@(e => VtnPagosMayores_Visible = false)" />
<Recaudacion_FormasPago_View @ref="VtnFormasPago" Fecha1="@f1" Fecha2="@f2" Subsistema="@Subsistema" Sector="@Sector" MostrarVentana="VtnFormasPago_Visible" CerrarModal="@( e => VtnFormasPago_Visible = false)" />
<Recaudacion_ConceptosVtn @ref="VtnRConceptos" FechaDesde="@f1" FechaHasta="@f2" Subsistema="@Subsistema" Sector="@Sector" Visible="@VtnRConceptos_Visible" CerrarModal="@(e => VtnRConceptos_Visible = false)" />

@code{

    private SfGrid<Recaudacion_Resumen> dataGrid { get; set; }
    private SfChart graficaIngresos { get; set; }
    private SfChart graficaUsuarios { get; set; }

    private bool busyDialog = false;
    private DateTime f1, f2;
    private int Subsistema, Sector;
    private List<Recaudacion_Resumen> datosRecaudacion { get; set; }
    private List<ChartItem> DatosGrafica_Ingresos { get; set; }
    private List<ChartItem> DatosGrafica_Usuarios { get; set; }

    private Recaudacion_IngresosAnalitico VtnAnalitico;
    private bool VtnAnalitico_visible = false;

    private Recaudacion_IngresosRezago VtnRezago;
    private bool VtnRezago_visible = false;

    private Recaudacion_IngresosxDias VtnDias;
    private bool VtnDias_visible = false;

    private Recaudacion_IngresosxCajas VtnCajas;
    private bool VtnCajas_visible = false;

    private Recaudacion_IngresosConceptos VtnConceptos;
    private bool VtnConceptos_visible = false;

    private Recaudacion_IngresosTipoUsuario VtnTiposUsuarios;
    private bool VtnTiposUsuarios_Visible = false;

    private Recaudacion_LocalidadesVtn VtnPoblaciones;
    private bool VtnPoblaciones_Visible = false;

    private Recaudacion_IngresosPagosMayoresVtn VtnPagosMayores;
    private bool VtnPagosMayores_Visible = false;

    private Recaudacion_FormasPago_View VtnFormasPago;
    private bool VtnFormasPago_Visible = false;

    private Recaudacion_ConceptosVtn VtnRConceptos;
    private bool VtnRConceptos_Visible = false;


    //********* Funciones  *********
    protected override void OnInitialized() {

        if(!sicemService.Usuario.OpcionSistemas.Select(item => item.Id).Contains(OpcionesSistema.RECAUDACION)){
            navigationManager.NavigateTo("/");
            return;
        }


        var _now = DateTime.Now;
        this.f1 = new DateTime(_now.Year, _now.Month, 1);
        this.f2 = new DateTime(_now.Year, _now.Month, DateTime.DaysInMonth(_now.Year, _now.Month));
        this.Subsistema = 0;
        this.Sector = 0;
    }

    public void Procesar(SeleccionarFechaEventArgs e) {

        this.f1 = e.Fecha1;
        this.f2 = e.Fecha2;
        this.Subsistema = e.Subsistema;
        this.Sector = e.Sector;

        IEnlace[] enlaces = sicemService.ObtenerOficinasDelUsuario().ToArray();

        //****** Preparar filas
        datosRecaudacion = new List<Recaudacion_Resumen>();
        DatosGrafica_Ingresos = new List<ChartItem>();
        DatosGrafica_Usuarios = new List<ChartItem>();
        var Tareas = new List<Task>();

        //****** Prepara Filas
        foreach (var enlace in enlaces) {
            var oficinaModel = new Recaudacion_Resumen();
            oficinaModel.Enlace  = enlace;
            datosRecaudacion.Add(oficinaModel);

            //*** Agregar items grafica
            DatosGrafica_Ingresos.Add(new ChartItem() {
                Id = enlace.Id,
                Descripcion = enlace.Nombre,
                Valor1 = 0m,
            });
            DatosGrafica_Usuarios.Add(new ChartItem() {
                Id = enlace.Id,
                Descripcion = enlace.Nombre,
                Valor1 = 0m,
            });

            //*** Agregar tarea
            Tareas.Add(new Task(() => ConsultarOficina(enlace)) );
        }

        //*** Agregar fila total
        if (enlaces.Length > 1) {
            var oficinaModel = new Recaudacion_Resumen(){
                Estatus =1 ,
                Enlace = new Ruta(){
                    Oficina =" TOTAL",
                    Id = 999
                }
            };
            datosRecaudacion.Add(oficinaModel);
        }

        //****** Iniciar tareas
        foreach (var tarea in Tareas) { tarea.Start(); }

    }
    private void ConsultarOficina(IEnlace enlace) {

        //*** Realizar consulta
        Recaudacion_Resumen tmpDatos = recaudacionService.ObtenerResumen(enlace, f1, f2, Subsistema, Sector);

        var _random = new Random();
        var sleep = _random.Next(3000);
        System.Threading.Thread.Sleep(sleep);

        //*** Refrescar datos grid
        lock(datosRecaudacion){

            //*** Actualizar fila grid
            var item = datosRecaudacion.Where(item => item.Id == enlace.Id).FirstOrDefault();
            if (item != null) {
                if (tmpDatos.Estatus == 1) {
                    item.Estatus = 1;
                    item.Cobrado = tmpDatos.Cobrado;
                    item.SubTotal = tmpDatos.SubTotal;
                    item.Iva = tmpDatos.Iva;
                    item.Total = tmpDatos.Total;
                    item.Cobrado = tmpDatos.Cobrado;
                    item.UsuariosFact = tmpDatos.UsuariosFact;
                    item.UsuariosCobrado = tmpDatos.UsuariosCobrado;
                    item.PorCobrado = tmpDatos.PorCobrado;
                    item.RecibosPropios = tmpDatos.RecibosPropios;
                    item.RecibosOtros = tmpDatos.RecibosOtros;
                }
                else {
                    item.Estatus = 2;
                }
            }

            RecalcularFilaTotal();
            dataGrid.Refresh();
        }

        //*** Actualizar grafica ingresos
        lock(DatosGrafica_Ingresos){
            try{
                var itemGraf1 = DatosGrafica_Ingresos.Where(item => item.Id == enlace.Id).FirstOrDefault();
                if(itemGraf1 != null) {
                    itemGraf1.Valor1 = tmpDatos.Cobrado;
                }            
                graficaIngresos.RefreshAsync();
            }catch(Exception){ }
        }

        //*** Actualizar grafica usuarios
        lock(DatosGrafica_Usuarios){
            try{
                var itemGraf2 = DatosGrafica_Usuarios.Where(item => item.Id == enlace.Id).FirstOrDefault();
                if (itemGraf2 != null) {
                    itemGraf2.Valor1 = tmpDatos.UsuariosCobrado;
                }
                graficaUsuarios.RefreshAsync();
            }catch(Exception){ }
        }

    }

    private void RecalcularFilaTotal() {
        //*** Recalcular fila total
        var itemTotal = datosRecaudacion.Where(item => item.Id == 999).FirstOrDefault();
        if (itemTotal != null) {
            var _tmpData = datosRecaudacion.Where(item => item.Id != 999).ToList();
            itemTotal.Cobrado = _tmpData.Sum(item => item.Cobrado);
            itemTotal.SubTotal = _tmpData.Sum(item => item.SubTotal);
            itemTotal.Iva = _tmpData.Sum(item => item.Iva);
            itemTotal.Total = _tmpData.Sum(item => item.Total);
            itemTotal.Cobrado = _tmpData.Sum(item => item.Cobrado);
            itemTotal.UsuariosFact = _tmpData.Sum(item => item.UsuariosFact);
            itemTotal.UsuariosCobrado = _tmpData.Sum(item => item.UsuariosCobrado);
            itemTotal.RecibosPropios = _tmpData.Sum(item => item.RecibosPropios);
            itemTotal.RecibosOtros = _tmpData.Sum(item => item.RecibosOtros);

            var _tmpPorc = (itemTotal.UsuariosFact > 0)?(itemTotal.UsuariosCobrado / itemTotal.UsuariosFact) * 100:0m;
            itemTotal.PorCobrado = System.Math.Round(_tmpPorc,2);
        }
    }
    private async Task ExportarExcel_Click(){
        var _options = new ExcelExportProperties(){
            IncludeHiddenColumn = true
        };
        await this.dataGrid.ExportToExcelAsync(_options);
    }

    //********* Funciones Ventanas Secundarias *********
    private async Task Analitico_Click(Recaudacion_Resumen data) {
        if (VtnAnalitico_visible) {
            return;
        }
        this.busyDialog = true;
        await Task.Delay(200);
        var tmpdata = recaudacionService.ObtenerAnalisisIngresos(data.Enlace, this.f1, this.f2, this.Subsistema, this.Sector);
        if (tmpdata == null) {
            Toaster.Add("Hubo un error al procesar la peticion, intentelo mas tarde.", MatToastType.Warning);
        }
        else {
            VtnAnalitico_visible = true;
            VtnAnalitico.Titulo = $"{data.Enlace.Nombre.ToUpper()} - INGRESOS ANALITICO";
            await VtnAnalitico.Inicializar(data.Enlace, tmpdata);
        }
        await Task.Delay(200);
        this.busyDialog = false;
    }
    private async Task Rezago_Click(Recaudacion_Resumen data) {
        if (VtnRezago_visible) {
            return;
        }
        this.busyDialog = true;
        await Task.Delay(200);
        var tmpData = recaudacionService.ObtenerRezago(data.Enlace, this.f1, this.f2, this.Subsistema, this.Sector);
        if (tmpData == null) {
            Toaster.Add("Hubo un error al procesar la petición, inténtelo mas tarde.", MatToastType.Warning);
        }
        else {
            VtnRezago_visible = true;
            VtnRezago.Titulo = $"{data.Enlace.Nombre.ToUpper()} - ANALISIS DE REZAGO";
            await VtnRezago.Inicializar(data.Enlace, tmpData);
        }
        await Task.Delay(200);
        this.busyDialog = false;
    }
    private async Task IngresosDias_Click(Recaudacion_Resumen data) {
        if (VtnDias_visible) {
            return;
        }
        this.busyDialog = true;
        await Task.Delay(200);
        var tmpData = recaudacionService.ObtenerIngresosPorDias(data.Enlace, this.f1, this.f2, this.Subsistema, this.Sector);
        if (tmpData == null) {
            Toaster.Add("Hubo un error al procesar la petición, inténtelo mas tarde.", MatToastType.Warning);
        }
        else {
            VtnDias_visible = true;
            VtnDias.Titulo = $"{data.Enlace.Nombre.ToUpper()} - INGRESOS DIAS";
            VtnDias.Inicializar(data.Enlace, tmpData);
        }
        await Task.Delay(200);
        this.busyDialog = false;
    }
    private async Task IngresosCajas_Click(Recaudacion_Resumen data) {
        if (VtnCajas_visible) {
            return;
        }
        this.busyDialog = true;
        await Task.Delay(200);
        var tmpData = recaudacionService.ObtenerIngresosPorCajas(data.Enlace, this.f1, this.f2, this.Subsistema, this.Sector);
        if (tmpData == null) {
            Toaster.Add("Hubo un error al procesar la petición, inténtelo mas tarde.", MatToastType.Warning);
        }
        else {
            if (tmpData.Count() > 0) {
                VtnCajas_visible = true;
                VtnCajas.Titulo = $"{data.Enlace.Nombre.ToUpper()} - INGRESOS POR CAJAS";
                VtnCajas.Inicializar(data.Enlace, tmpData);
            }
            else {
                Toaster.Add("No hay datos disponibles para mostrar.", MatToastType.Info);
            }
        }
        await Task.Delay(200);
        this.busyDialog = false;
    }
    private async Task IngresosConceptos_Click(Recaudacion_Resumen data) {
        if (VtnConceptos_visible) {
            return;
        }
        this.busyDialog = true;
        await Task.Delay(100);

        var tmpData = recaudacionService.ObtenerIngresosPorConceptos(data.Enlace, this.f1, this.f2, this.Subsistema, this.Sector);
        if (tmpData == null) {
            Toaster.Add("Hubo un error al procesar la petición, inténtelo mas tarde.", MatToastType.Warning);
        }
        else {
            if (tmpData.Count() > 0) {
                VtnConceptos_visible = true;
                VtnConceptos.Titulo = $"{data.Enlace.Nombre.ToUpper()} - INGRESOS POR CONCEPTOS";
                VtnConceptos.Inicializar(data.Enlace, tmpData);
            }
            else {
                Toaster.Add("No hay datos disponibles para mostrar.", MatToastType.Info);
            }
        }
        await Task.Delay(100);
        this.busyDialog = false;
    }
    private async Task IngresosTipoUsuarios_Click(Recaudacion_Resumen data) {
        this.busyDialog = true;
        await Task.Delay(100);
        if (!VtnTiposUsuarios_Visible) {
            var tmpData = recaudacionService.ObtenerIngresosPorTipoUsuarios(data.Enlace, this.f1, this.f2, this.Subsistema, this.Sector);
            if (tmpData == null) {
                Toaster.Add("Hubo un error al procesar la petición, inténtelo mas tarde.", MatToastType.Warning);
            }
            else {
                if (tmpData.Count() > 0) {
                    VtnTiposUsuarios_Visible = true;
                    VtnTiposUsuarios.Titulo = $"{data.Enlace.Nombre.ToUpper()} - INGRESOS TIPO DE USUARIO";
                    VtnTiposUsuarios.Inicializar(data.Enlace, tmpData);
                }
                else {
                    Toaster.Add("No hay datos disponibles para mostrar.", MatToastType.Info);
                }
            }
        }
        await Task.Delay(100);
        this.busyDialog = false;
    }
    private async Task IngresosPoPoblacion_Click(Recaudacion_Resumen data) {
        this.busyDialog = true;
        await Task.Delay(100);
        if (!VtnPoblaciones_Visible) {
            var tmpData = recaudacionService.ObtenerRecaudacionLocalidades(data.Enlace, this.f1, this.f2, this.Subsistema, this.Sector);
            if (tmpData == null) {
                Toaster.Add("Hubo un error al procesar la peticion, intentelo mas tarde.", MatToastType.Warning);
            }
            else {
                if (tmpData.Count() > 0) {
                    VtnPoblaciones_Visible = true;
                    VtnPoblaciones.Titulo = $"{data.Enlace.Nombre} - INGRESOS POR POBLACIONES";
                    VtnPoblaciones.Inicializar(tmpData, data.Enlace);
                }
                else {
                    Toaster.Add("No hay datos disponibles para mostrar.", MatToastType.Info);
                }
            }
        }
        await Task.Delay(100);
        this.busyDialog = false;
    }
    private async Task IngresosAltos_Click(Recaudacion_Resumen data) {
        if (VtnPagosMayores_Visible) {
            return;
        }
        VtnPagosMayores_Visible = true;
        await VtnPagosMayores.Inicializar(data.Enlace);
    }
    private async Task IngresosFormasdePago_Click(Recaudacion_Resumen data) {

        if (VtnFormasPago_Visible) {
            return;
        }

        this.busyDialog = true;
        await Task.Delay(100);

        var _result = recaudacionService.ObtenerIngresosPorFormasPago(data.Enlace, this.f1, this.f2, this.Subsistema, this.Sector);
        if (_result == null) {
            //**** Mostrar mensaje error
            Toaster.Add("Erro al procesar la consulta, intente mas tarde.", type: MatToastType.Danger);
        }
        else {
            if (_result.Count() <= 0) {
                //**** Mostrar mensaje no hay datos
                Toaster.Add("No hay datos disponibles.", type: MatToastType.Info);
            }
            else {
                //**** Mostrar ventana secundaria
                this.VtnFormasPago_Visible = true;
                VtnFormasPago.Titulo = $"{data.Enlace.Nombre} - INGRESOS POR FORMAS DE PAGO";
                this.VtnFormasPago.Inicializar(data.Enlace, _result);
            }
        }

        await Task.Delay(100);
        this.busyDialog = false;
        return;

    }

    private async Task IngresosPorConceptosTiposUsuarios(Recaudacion_Resumen data){
        this.busyDialog = true;
        await Task.Delay(100);

        var _datos = recaudacionService.ObtenerIngresosPorConceptosTipoUsuarios(data.Enlace, this.f1, this.f2, this.Subsistema, this.Sector, 0).ToList();
        if( _datos == null){
            Toaster.Add("Error al tratar de obtener los ingresos por conceptos", MatToastType.Danger);
        }else{
            if(_datos.Count() <= 0){
                Toaster.Add("No hay datos disponibles para este periodo", MatToastType.Info);
            }else{
                
                // Generar catalogo de localidades
                var catLocalidades = new Dictionary<int,string>();
                var _localidades = sicemService.ObtenerCatalogoLocalidades(data.Enlace.Id).Where(i => i.Id_Poblacion > 0).ToList();
                catLocalidades.Add(0, "TODOS");
                foreach( var loc in _localidades){
                    catLocalidades.Add(loc.Id_Poblacion, loc.Descripcion.ToUpper().Trim());
                }
                
                // Inicializar ventana secundaria
                VtnRConceptos_Visible = true;
                VtnRConceptos.Inicializar(data.Enlace, _datos, catLocalidades);
            }
        }

        await Task.Delay(100);
        this.busyDialog = false;
    
    }


}