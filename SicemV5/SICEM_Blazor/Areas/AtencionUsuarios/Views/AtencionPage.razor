@page "/Atencion"
@using System.Text
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Charts
@using SICEM_Blazor.Models
@inject SicemService sicemService
@inject IAtencionService atencionService 
@inject IMatToaster Toaster
@inject NavigationManager navigationManager

<div class="layout-page1">

    <div class="title-page" style="grid-area:1/1/2/2;">ATENCIÃ“N A USUARIOS</div>

    <div class="border rounded bg-white px-2 d-flex align-items-center" style="grid-area:2/1/3/2;">
        <SeleccionarFecha ProcesarParam="@Procesar" MostrarPeriodos="false" />
    </div>

    @* ****** Acciones ****** *@
    <div class="border rounded bg-white d-flex align-items-center" style="grid-area:3/1/4/2;">
        <MatButton Class="mx-2" style="min-width: 130px;" Raised="true" @onclick="ExportarExcel_Click">Exportar Excel</MatButton>
    </div>

    @* ****** DataGrid ****** *@
    <div class="border rounded bg-white p-2 d-flex" style="grid-area:4/1/5/2;">
        <SfGrid @ref="DataGrid" DataSource="@DatosGrid" TValue="Atencion_Resumen" AllowResizing="true" AllowSorting="true" AllowFiltering="false"
                AllowExcelExport="true" AllowPdfExport="true" Height="100%" Width="100%" EnableHover="true">
            <GridColumns>
                <GridColumn HeaderText="" TextAlign="TextAlign.Center" Width="40">
                    <Template>
                        @{
                            var data = (context as Atencion_Resumen);
                            if(data.Enlace.Id > 0 && data.Enlace.Id < 999) {
                                @switch (data.IdEstatus) {

                                    case 1:
                                        <i class="fas fa-check-circle" style="color:green; font-size:1.5rem;"></i>
                                        break;

                                    case 2:
                                        <i class="fas fa-exclamation-circle" style="color:red; font-size:1.5rem;"></i>
                                        break;

                                    default:
                                        <div class="spinner-border p-2" role="status"> </div>
                                        break;
                                }
                            }
                        }
                    </Template>
                </GridColumn>
                <GridColumn Field="@nameof(Atencion_Resumen.NombreEnlace)" HeaderText="Oficina" TextAlign="TextAlign.Left" Width="170" />

                <GridColumn Field="@nameof(Atencion_Resumen.Total)" HeaderText="Total" TextAlign="TextAlign.Center" Width="120" Visible="false" />
                <GridColumn Field="@nameof(Atencion_Resumen.Pendiente)" HeaderText="Pendientes" TextAlign="TextAlign.Center" Width="110" Visible="false"/>
                <GridColumn Field="@nameof(Atencion_Resumen.Atendido)" HeaderText="Atendidos" TextAlign="TextAlign.Center" Width="110" Visible="false"/>
                <GridColumn Field="@nameof(Atencion_Resumen.Resuelto)" HeaderText="Resueltos" TextAlign="TextAlign.Center" Width="110" Visible="false"/>
                <GridColumn Field="@nameof(Atencion_Resumen.Sin_resolver)" HeaderText="Sin Resolver" TextAlign="TextAlign.Center" Width="110" Visible="false"/>

                <GridColumn Field="@nameof(Atencion_Resumen.Total)" HeaderText="Total" TextAlign="TextAlign.Center" Width="120">
                    <Template>
                        @{
                            var data = (context as Atencion_Resumen);
                            <div class="link-button color-dark" @onclick="@(e => Mostrar_Vtn_Detalle(data, 0) )"> @data.Total </div>
                        }
                    </Template>
                </GridColumn>
                <GridColumn Field="@nameof(Atencion_Resumen.Pendiente)" HeaderText="Pendientes" TextAlign="TextAlign.Center" Width="110">
                    <Template>
                        @{
                            var data = (context as Atencion_Resumen);
                            <div class="link-button color-dark" @onclick="@(e => Mostrar_Vtn_Detalle(data, 1) )"> @data.Pendiente </div>
                        }
                    </Template>
                </GridColumn>
                <GridColumn Field="@nameof(Atencion_Resumen.Atendido)" HeaderText="Atendidos" TextAlign="TextAlign.Center" Width="110" >
                    <Template>
                        @{
                            var data = (context as Atencion_Resumen);
                            <div class="link-button color-dark" @onclick="@(e => Mostrar_Vtn_Detalle(data, 2) )"> @data.Atendido </div>
                        }
                    </Template>
                </GridColumn>
                <GridColumn Field="@nameof(Atencion_Resumen.Resuelto)" HeaderText="Resueltos" TextAlign="TextAlign.Center" Width="110" >
                    <Template>
                        @{
                            var data = (context as Atencion_Resumen);
                            <div class="link-button color-dark" @onclick="@(e => Mostrar_Vtn_Detalle(data, 3) )"> @data.Resuelto </div>
                        }
                    </Template>
                </GridColumn>
                <GridColumn Field="@nameof(Atencion_Resumen.Sin_resolver)" HeaderText="Sin Resolver" TextAlign="TextAlign.Center" Width="110" >
                    <Template>
                        @{
                            var data = (context as Atencion_Resumen);
                            <div class="link-button color-dark" @onclick="@(e => Mostrar_Vtn_Detalle(data, 4) )"> @data.Sin_resolver </div>
                        }
                    </Template>
                </GridColumn>

                <GridColumn Field="@nameof(Atencion_Resumen.Descuentos)" HeaderText="Descuentos" TextAlign="TextAlign.Center" Width="110" />
                <GridColumn Field="@nameof(Atencion_Resumen.Imp_Descuentos)" HeaderText="Imp Descuentos" TextAlign="TextAlign.Right" Width="120" Format="c2" />
                <GridColumn Field="@nameof(Atencion_Resumen.Convenios)" HeaderText="Convenios" TextAlign="TextAlign.Center" Width="120" />
                <GridColumn Field="@nameof(Atencion_Resumen.Imp_Convenios)" HeaderText="Imp Convenios" TextAlign="TextAlign.Right" Width="120" Format="c2" />
                
                <GridColumn HeaderText="Acciones" TextAlign="TextAlign.Left" Width="240">
                    <Template>
                        @{
                            var data = (context as Atencion_Resumen);
                            if (data.Enlace.Id > 0 && data.Enlace.Id < 90) {
                                <div class="d-flex p-1">
                                    <button type="button" class="btn btn-primary btn-sm mx-1" data-toggle="tooltip" data-placement="top" title="Resumen por Colonias" disabled="@(data.IdEstatus != 1 )" @onclick=@( e => Mostrar_Vtn_Colonias(data) )>
                                        <i class="fa fa-bookmark" aria-hidden="true"></i>
                                    </button>
                                    <button type="button" class="btn btn-primary btn-sm mx-1" data-toggle="tooltip" data-placement="top" title="Resumen por Asuntos" disabled="@(data.IdEstatus != 1 )" @onclick=@( e => Mostrar_Vtn_Asuntos(data) )>
                                        <i class="fa fa-bookmark" aria-hidden="true"></i>
                                    </button>
                                     <button type="button" class="btn btn-primary btn-sm mx-1" data-toggle="tooltip" data-placement="top" title="Resumen por Origen" disabled="@(data.IdEstatus != 1 )" @onclick=@( e => Mostrar_Vtn_Origen(data) )>
                                        <i class="fa fa-bookmark" aria-hidden="true"></i>
                                    </button>
                                    <button type="button" class="btn btn-primary btn-sm mx-1" data-toggle="tooltip" data-placement="top" title="Descuentos" disabled="@(data.IdEstatus != 1 )" @onclick=@( e => Mostrar_Vtn_Descuentos(data) )>
                                        <i class="fa fa-bookmark" aria-hidden="true"></i>
                                    </button>
                                    <button type="button" class="btn btn-primary btn-sm mx-1" data-toggle="tooltip" data-placement="top" title="Convenios" disabled="@(data.IdEstatus != 1 )" @onclick=@( e => Mostrar_Vtn_Convenios(data) )>
                                        <i class="fa fa-bookmark" aria-hidden="true"></i>
                                    </button>                                    
                                </div>
                            }
                        }
                    </Template>
                </GridColumn>
            </GridColumns>
        </SfGrid>
    </div>

    <!--- ****** Graficas ****** -->
    
    <div class="border rounded bg-white mr-1 d-flex flex-column align-items-center" style="grid-area:5/1/6/2;">
        <SfChart @ref="@Grafica" Title="" Height="100%" Width="100%">
            <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category"></ChartPrimaryXAxis>
            <ChartPrimaryYAxis Visible="false" LabelFormat="n0" />
            <ChartTooltipSettings Enable="true" Header="Eventos" Format="<b>${series.name}</b> : ${point.y}" Shared="true"></ChartTooltipSettings>
            <ChartSeriesCollection>
                <ChartSeries DataSource="@DatosGrafica" Name="Pendientes" XName="Descripcion" YName="Valor1" Type="ChartSeriesType.StackingColumn">
                    <ChartMarker>
                        <ChartDataLabel Visible="true" Position="Syncfusion.Blazor.Charts.LabelPosition.Outer" />
                    </ChartMarker>
                </ChartSeries>
                <ChartSeries DataSource="@DatosGrafica" Name="Atendido" XName="Descripcion" YName="Valor2" Type="ChartSeriesType.StackingColumn">
                    <ChartMarker>
                        <ChartDataLabel Visible="true" Position="Syncfusion.Blazor.Charts.LabelPosition.Outer" />
                    </ChartMarker>
                </ChartSeries>
                <ChartSeries DataSource="@DatosGrafica" Name="Resueltos" XName="Descripcion" YName="Valor3" Type="ChartSeriesType.StackingColumn">
                    <ChartMarker>
                        <ChartDataLabel Visible="true" Position="Syncfusion.Blazor.Charts.LabelPosition.Outer" />
                    </ChartMarker>
                </ChartSeries>
                <ChartSeries DataSource="@DatosGrafica" Name="Sin Resolver" XName="Descripcion" YName="Valor4" Type="ChartSeriesType.StackingColumn">
                    <ChartMarker>
                        <ChartDataLabel Visible="true" Position="Syncfusion.Blazor.Charts.LabelPosition.Outer" />
                    </ChartMarker>
                </ChartSeries>
            </ChartSeriesCollection>
        </SfChart>
    </div>
        @*
        <div class="border rounded bg-white ml-1 d-flex flex-column align-items-center" style="width:50%; height:100%;">
            <SfChart @ref="graficaUsuarios" Title="USUARIOS">
                <ChartPrimaryXAxis ValueType="Syncfusion.Blazor.Charts.ValueType.Category"></ChartPrimaryXAxis>
                <ChartPrimaryYAxis Visible="false" LabelFormat="n0" />
                <ChartTooltipSettings Enable="true" Header="Usuarios" Format="<b>${series.name}</b> : ${point.y}" Shared="true"></ChartTooltipSettings>
                <ChartSeriesCollection>
                    <ChartSeries DataSource="@DatosGrafica_Usuarios" Name="Usuarios Cobrados" XName="Descripcion" YName="Valor1" Type="ChartSeriesType.StackingColumn">
                        <ChartMarker>
                            <ChartDataLabel Visible="true" Position="Syncfusion.Blazor.Charts.LabelPosition.Outer" />
                        </ChartMarker>
                    </ChartSeries>
                </ChartSeriesCollection>
            </SfChart>
        </div>
    *@

</div>

@* ****** Dialogos y ventanas secundarias ****** *@
<BusyIndicator Busy="@busyDialog" ContentText="Cargando datos...." />
<Atencion_DescuentosVtn @ref="vtn_descuentos" Visible="@vtn_descuentos_visible" CerrarModal="@(e => vtn_descuentos_visible = false)" Fecha1="@Fecha1" Fecha2="@Fecha2" Subsistema="@Subsistema" Sector="@Sector" />
<Atencion_ConveniosVtn @ref="vtn_convenios" Visible="@vtn_convenios_visible" CerrarModal="@(e => vtn_convenios_visible = false)" Fecha1="@Fecha1" Fecha2="@Fecha2" Subsistema="@Subsistema" Sector="@Sector" />
<Atencion_ColoniasVtn @ref="vtn_colonias" Visible="@vtn_colonias_visible" CerrarModal="@(e => vtn_colonias_visible = false)" Fecha1="@Fecha1" Fecha2="@Fecha2" Subsistema="@Subsistema" Sector="@Sector" />
<Atencion_AsuntosVtn @ref="vtn_asuntos" Visible="@vtn_asuntos_visible" CerrarModal="@(e => vtn_asuntos_visible = false)" Fecha1="@Fecha1" Fecha2="@Fecha2" Subsistema="@Subsistema" Sector="@Sector" />
<Atencion_DetalleVtn @ref="vtn_detalle" Visible="@vtn_detalle_visible" CerrarModal="@(e => vtn_detalle_visible = false)" Fecha1="@Fecha1" Fecha2="@Fecha2" Subsistema="@Subsistema" Sector="@Sector" Filtro_Estatus="@filtrar_estatus" Filtro_Asuntos="filtrar_asunto" />
<Atencion_OrigenVtn @ref="vtn_origen" Visible="@vtn_origne_visible" CerrarModal="@(e => vtn_origne_visible = false)" Fecha1="@Fecha1" Fecha2="@Fecha2" Subsistema="@Subsistema" Sector="@Sector" />

@code{

    private SfGrid<Atencion_Resumen> DataGrid {get;set;}
    private SfChart Grafica {get;set;}
    private List<Atencion_Resumen> DatosGrid { get; set; }
    private List<ChartItem> DatosGrafica {get;set;}

    private bool filtrar_asunto = false, filtrar_estatus = false, busyDialog =false;
    private DateTime Fecha1, Fecha2;
    private int Subsistema = 0, Sector = 0;

    private bool vtn_detalle_visible = false, vtn_descuentos_visible = false, vtn_convenios_visible = false, vtn_colonias_visible = false, vtn_asuntos_visible = false, vtn_origne_visible;

    private Atencion_DetalleVtn vtn_detalle {get;set;}
    private Atencion_DescuentosVtn vtn_descuentos {get;set;}
    private Atencion_ConveniosVtn vtn_convenios {get;set;}
    private Atencion_ColoniasVtn vtn_colonias {get;set;}
    private Atencion_AsuntosVtn vtn_asuntos {get;set;}
    private Atencion_OrigenVtn vtn_origen {get;set;}


    //********* Funciones  *********
    protected override void OnInitialized() {

        // Validar si se cuenta con la opcion
        if(!sicemService.Usuario.OpcionSistemas.Select(item => item.Id).Contains(OpcionesSistema.ATENCION_USUARIOS)){
            navigationManager.NavigateTo("/");
            return;
        }

        var _now = DateTime.Now;

        var tmpE = new SeleccionarFechaEventArgs() {
            Subsistema = 0,
            Sector = 0,
            Fecha1 = new DateTime(_now.Year, _now.Month, 1),
            Fecha2 = new DateTime(_now.Year, _now.Month, DateTime.DaysInMonth(_now.Year, _now.Month))
        };

        this.Fecha1 = tmpE.Fecha1;
        this.Fecha2 = tmpE.Fecha2;
        this.Subsistema = tmpE.Subsistema;
        this.Sector = tmpE.Sector;

        //await Procesar(tmpE);
    }
    public async Task Procesar(SeleccionarFechaEventArgs e) {
        this.Fecha1 = e.Fecha1;
        this.Fecha2 = e.Fecha2;
        this.Subsistema = e.Subsistema;
        this.Sector = e.Sector;

        IEnumerable<IEnlace> enlaces = sicemService.ObtenerOficinasDelUsuario();
        DatosGrafica = new List<ChartItem>();
        DatosGrid = new List<Atencion_Resumen>();
        foreach(var enlace in enlaces){
            DatosGrid.Add( new Atencion_Resumen(){Enlace = enlace});
        }

        await Task.Delay(200);

        //***** Generar Lista Tareas
        var _tareas = new List<Task>();
        foreach(var enlace in enlaces){
            _tareas.Add(Task.Factory.StartNew( () => {
                RealizarConsulta(enlace);
            }));
        }
    }
    private void RealizarConsulta(IEnlace enlace){
        var _datos = atencionService.ObtenerResumenOficina(enlace, Fecha1, Fecha2, Subsistema, Sector);
        
        lock(DatosGrid){
            var _element = DatosGrid.Where(item => item.Enlace.Id == enlace.Id).FirstOrDefault();
            if(_element != null){
                _element.IdEstatus = _datos.IdEstatus;
                _element.Total = _datos.Total;
                _element.Pendiente = _datos.Pendiente;
                _element.Atendido = _datos.Atendido;
                _element.Resuelto = _datos.Resuelto;
                _element.Sin_resolver = _datos.Sin_resolver;
                _element.Descuentos = _datos.Descuentos;
                _element.Imp_Descuentos = _datos.Imp_Descuentos;
                _element.Convenios = _datos.Convenios;
                _element.Imp_Convenios = _datos.Imp_Convenios;
            }
            DataGrid.Refresh();

            
            
        }

        //ActualizarGrafica();  
        lock(DatosGrafica){
            this.DatosGrafica.Add(new ChartItem(){
                Descripcion = _datos.Enlace.Nombre,
                Valor1 = _datos.Pendiente,
                Valor2 = _datos.Atendido,
                Valor3 = _datos.Resuelto,
                Valor4 = _datos.Sin_resolver
            });
            if(Grafica != null){
                Grafica.RefreshLiveData();
            }
        }
        
    }

    private async Task ExportarExcel_Click(){
        if(DataGrid == null){
            Toaster.Add("Error al tratar de exportar los datos", MatToastType.Danger);
            return;
        }
        await DataGrid.ExportToExcelAsync(new ExcelExportProperties(){
            IncludeHiddenColumn = true
        });
    }


    //*** Funciones Ventanas Secundarias
    private async Task Mostrar_Vtn_Descuentos(Atencion_Resumen data){
        if(!vtn_descuentos_visible){
            this.busyDialog = true;
            await Task.Delay(100);

            var datos = atencionService.ObtenerDescuentos(data.Enlace, Fecha1, Fecha2, Subsistema, Sector).ToArray();
            var titulo =  $"Descuentos Generados del {Fecha1.ToString("dd/MM/yyyy")} al {Fecha2.ToString("dd/MM/yyyy")}";

            if(datos == null){
                busyDialog = false;
                Toaster.Add("No hay datos disponibles", MatToastType.Info, "Sin Datos", null);
                return;
            }
            if (datos.Length <= 0) {
                busyDialog = false;
                Toaster.Add("No hay datos disponibles", MatToastType.Info, "Sin Datos", null);
                return;
            }

            vtn_descuentos_visible = true;
            vtn_descuentos.Titulo = titulo;
            vtn_descuentos.Inicializar(datos, data.Enlace);

            await Task.Delay(100);
            this.busyDialog = false;
        }
    }
    private async Task Mostrar_Vtn_Convenios(Atencion_Resumen data){
        if(!vtn_convenios_visible){
            this.busyDialog = true;
            await Task.Delay(100);

            var datos = atencionService.ObtenerConvenios(data.Enlace, Fecha1, Fecha2, Subsistema, Sector).ToArray();
            var titulo =  $"Convenios Generados del {Fecha1.ToString("dd/MM/yyyy")} al {Fecha2.ToString("dd/MM/yyyy")}";

            if(datos == null){
                busyDialog = false;
                Toaster.Add("No hay datos disponibles", MatToastType.Info, "Sin Datos", null);
                return;
            }
            if (datos.Length <= 0) {
                busyDialog = false;
                Toaster.Add("No hay datos disponibles", MatToastType.Info, "Sin Datos", null);
                return;
            }

            vtn_convenios_visible = true;
            vtn_convenios.Titulo = titulo;
            vtn_convenios.Inicializar(datos);

            this.busyDialog = false;
            await Task.Delay(100);
        }
    }    
    private async Task Mostrar_Vtn_Colonias(Atencion_Resumen data){
        if(!vtn_colonias_visible){
            this.busyDialog = true;
            await Task.Delay(100);

            var datos = atencionService.ObtenerAtencionPorColonias(data.Enlace, Fecha1, Fecha2, Subsistema, Sector).ToArray();
            var titulo =  $"Turnos de Atencion por Colonias del {Fecha1.ToString("dd/MM/yyyy")} al {Fecha2.ToString("dd/MM/yyyy")}";

            if(datos == null){
                busyDialog = false;
                Toaster.Add("No hay datos disponibles", MatToastType.Info, "Sin Datos", null);
                return;
            }
            if (datos.Length <= 0) {
                busyDialog = false;
                Toaster.Add("No hay datos disponibles", MatToastType.Info, "Sin Datos", null);
                return;
            }

            vtn_colonias_visible = true;
            vtn_colonias.Titulo = titulo;
            vtn_colonias.Inicializar(datos, data.Enlace);

            this.busyDialog = false;
            await Task.Delay(100);
        }
    }
    private async Task Mostrar_Vtn_Asuntos(Atencion_Resumen data){
       if(!vtn_asuntos_visible){

            this.busyDialog = true;
            await Task.Delay(100);

            var datos = atencionService.ObtenerAtencionPorAsuntos(data.Enlace, Fecha1, Fecha2, Subsistema, Sector).ToArray();
            var titulo =  $"Turnos de Atencion por Asuntos del {Fecha1.ToString("dd/MM/yyyy")} al {Fecha2.ToString("dd/MM/yyyy")}";

            if(datos == null){
                busyDialog = false;
                Toaster.Add("No hay datos disponibles", MatToastType.Info, "Sin Datos", null);
                return;
            }
            if (datos.Length <= 0) {
                busyDialog = false;
                Toaster.Add("No hay datos disponibles", MatToastType.Info, "Sin Datos", null);
                return;
            }

            vtn_asuntos_visible = true;
            vtn_asuntos.Titulo = titulo;
            vtn_asuntos.Inicializar(datos, data.Enlace);

            this.busyDialog = false;
            await Task.Delay(100);
        }
    }
    private async Task Mostrar_Vtn_Detalle(Atencion_Resumen data, int opcion){
        if(!vtn_detalle_visible){
            this.busyDialog = true;
            await Task.Delay(200);

            filtrar_estatus = false;
            filtrar_asunto = true;

            Atencion_Detalle[] datos = new Atencion_Detalle[]{};
            var titulo = "Turnos de Atencion";
            switch(opcion){
                case 0:
                    datos = atencionService.ObtenerAtencionDetalle(data.Enlace, Fecha1, Fecha2, Subsistema, Sector, "").ToArray();
                    titulo = $"Turnos de Atencion Generadas del {Fecha1.ToString("dd/MM/yyyy")} al {Fecha2.ToString("dd/MM/yyyy")}";
                    break;
                case 1:
                    datos = atencionService.ObtenerAtencionDetalle(data.Enlace, Fecha1, Fecha2, Subsistema, Sector, "id_estatus:45").ToArray();
                    titulo = $"Turnos de Atencion Pendientes del {Fecha1.ToString("dd/MM/yyyy")} al {Fecha2.ToString("dd/MM/yyyy")}";
                    break;
                case 2:
                    datos = atencionService.ObtenerAtencionDetalle(data.Enlace, Fecha1, Fecha2, Subsistema, Sector, "id_estatus:46").ToArray();
                    titulo = $"Turnos de Atencion Atendidos del {Fecha1.ToString("dd/MM/yyyy")} al {Fecha2.ToString("dd/MM/yyyy")}";
                    break;
                case 3:
                    datos = atencionService.ObtenerAtencionDetalle(data.Enlace, Fecha1, Fecha2, Subsistema, Sector, "id_estatus:47").ToArray();
                    titulo = $"Turnos de Atencion Resueltos del {Fecha1.ToString("dd/MM/yyyy")} al {Fecha2.ToString("dd/MM/yyyy")}";
                    break;
                case 4:
                    datos = atencionService.ObtenerAtencionDetalle(data.Enlace,Fecha1, Fecha2, Subsistema, Sector, "id_estatus:58").ToArray();
                    titulo = $"Turnos de Atencion Sin Resolver del {Fecha1.ToString("dd/MM/yyyy")} al {Fecha2.ToString("dd/MM/yyyy")}";
                    break;
            }

            if(datos == null){
                busyDialog = false;
                Toaster.Add("No hay datos disponibles", MatToastType.Info, "Sin Datos", null);
                return;
            }
            if (datos.Length <= 0) {
                busyDialog = false;
                Toaster.Add("No hay datos disponibles", MatToastType.Info, "Sin Datos", null);
                return;
            }

            vtn_detalle_visible = true;
            vtn_detalle.Titulo = titulo;
            vtn_detalle.Inicializar(datos);

            this.busyDialog = false;
            await Task.Delay(200);
        }
    }
    private void MostrarDetalle_Anual(Atencion_Anual data, int mes){
        /*
        if(!vtn_detalle_visible){
            this.busyDialog = true;

            filtrar_estatus  = true;
            filtrar_asunto = false;

            DateTime cFecha1, cFecha2;
            if(mes == 666){
                cFecha1 = new DateTime(Fecha1.Year, 01,01);
                cFecha2 = new DateTime(Fecha1.Year, 12,31);
            }else{
                cFecha1 = new DateTime(Fecha1.Year, mes, 01);
                cFecha2 = new DateTime(Fecha1.Year, mes, DateTime.DaysInMonth(Fecha1.Year, mes));
            }


            Atencion_Detalle[] datos = new Atencion_Detalle[]{};
            datos = atencionService.ObtenerDetalleAtencion(1, cFecha1, cFecha2, Subsistema, Sector, "id_asunto:data.Id_asunto");
            var titulo = $"Turnos de {data.Asunto} del {cFecha1.ToString("dd/MM/yyyy")} al {cFecha2.ToString("dd/MM/yyyy")}";

            if(datos == null){
                busyDialog = false;
                Toaster.Add("No hay datos disponibles", MatToastType.Info, "Sin Datos", null);
                return;
            }
            if (datos.Length <= 0) {
                busyDialog = false;
                Toaster.Add("No hay datos disponibles", MatToastType.Info, "Sin Datos", null);
                return;
            }

            vtn_detalle_visible = true;
            await vtn_detalle.Inicializar(datos, titulo);

            this.busyDialog = false;
        }
        */

    }

    private async Task Mostrar_Vtn_Origen(Atencion_Resumen data){
       if(!vtn_origne_visible){

            this.busyDialog = true;
            await Task.Delay(100);

            var datos = atencionService.ObtenerAtencionPorOrigen(data.Enlace, Fecha1, Fecha2, Subsistema, Sector).ToArray();
            var titulo =  $"Turnos de Atencion por Origen del {Fecha1.ToString("dd/MM/yyyy")} al {Fecha2.ToString("dd/MM/yyyy")}";

            Console.WriteLine("Total:" + datos.Count());

            if(datos == null){
                busyDialog = false;
                Toaster.Add("No hay datos disponibles", MatToastType.Info, "Sin Datos", null);
                return;
            }
            if (datos.Length <= 0) {
                busyDialog = false;
                Toaster.Add("No hay datos disponibles", MatToastType.Info, "Sin Datos", null);
                return;
            }

            vtn_origne_visible = true;
            vtn_origen.Titulo = titulo;
            vtn_origen.Inicializar(datos, data.Enlace);

            this.busyDialog = false;
            await Task.Delay(100);
        }
    }
}