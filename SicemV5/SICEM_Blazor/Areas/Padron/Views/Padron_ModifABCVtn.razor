@using Syncfusion.Blazor
@using Syncfusion.Blazor.Popups
@using Syncfusion.Blazor.Inputs
@using Syncfusion.Blazor.Buttons
@using Syncfusion.Blazor.Grids
@using Syncfusion.Blazor.Data
@using SICEM_Blazor.Padron.Models
@inject IJSRuntime JSRuntime
@inject IMatToaster Toaster
@inject PadronService padronService


@if (Visible) {
    <VentanaSecundaria Titulo="@Titulo" CerrarVentana="@CerrarModal" Filas="@(new double[]{50, 50, 570})" Columnas="@(new double[]{.65,.25})">
        <Content>

            <!-- ****** Re Procesar ****** -->
            <div class="d-flex align-items-center m-1 p-2 border rounded bg-white" style="grid-row: 1/2; grid-column: 1/3;">

                <div class="mx-2 font-weight-bold" style="font-size: 1.1rem;"> Fecha 1: </div>
                <input type="date" style="width:110px;" @bind-value="@Fecha1">
                <div class="mx-2" style="font-size: 1.1rem;">-</div>
                <input type="date" style="width:110px;" @bind-value="@Fecha2">

                <div class="mx-2 font-weight-bold" style="font-size: 1.1rem;"> Sub: </div>
                <input type="number" class="mr-2" style="width:50px; text-align:center;" Minimum="0" @bind-value="@Subsistema">

                <div class="mx-2 font-weight-bold" style="font-size: 1.1rem;"> Sect: </div>
                <input type="number" class="mr-2" style="width:50px; text-align:center;" Minimum="0" @bind-value="@Sector">

                <MatButton Class="ml-5 mr-2" Raised="true" Style="height:2.5rem;" OnClick="@Procesar">Procesar</MatButton>

            </div>

            <!-- ****** Filtro y Exportar ****** -->
            <div class="m-1 p-2 border rounded bg-white d-flex align-items-center" style="grid-row: 2/3; grid-column: 1/3;">

                <div class="mx-2 font-weight-bold" style="font-size: 1.1rem;"> Sucursal: </div>
                <ComboBox InitValue="0" Options="@cat_sucursales" OnSelected="@( val => ComboBoxFiltro_SelectionChaged("sucursales", val) )" />

                <div class="mx-2 font-weight-bold" style="font-size: 1.1rem;"> Colonia: </div>
                <ComboBox InitValue="0" Options="@cat_colonias" OnSelected="@( val => ComboBoxFiltro_SelectionChaged("colonias", val) )" />

                <div class="mx-2 font-weight-bold" style="font-size: 1.1rem;"> Departamento: </div>
                <ComboBox InitValue="0" Options="@cat_departamentos" OnSelected="@( val => ComboBoxFiltro_SelectionChaged("departamentos", val) )" />

                <MatButton Class="ml-4" Raised="true" Style="height:2.5rem;" OnClick="@GenerarExcel">Exportar Excel <i class="fa fa-file-excel-o ml-2" aria-hidden="true"></i> </MatButton>
            </div>

            <!-- ****** DataGrid ****** -->
            <div class="d-flex flex-row m-1 p-2 border rounded bg-white" style="grid-row: 3/4; grid-column: 1/2;">
                <SfGrid @ref="dataGrid" DataSource="@datosGrid" AllowPaging="@allowPagesGrid" AllowSorting="true" AllowResizing="true"
                        AllowFiltering="false" AllowExcelExport="true" AllowPdfExport="true" Height="100%" Width="100%" EnableHover="true">
                    <GridPageSettings PageSize="1000"></GridPageSettings>
                    <GridSelectionSettings Mode="Syncfusion.Blazor.Grids.SelectionMode.Row" Type="Syncfusion.Blazor.Grids.SelectionType.Single" EnableToggle="true"></GridSelectionSettings>
                    <GridEvents RowSelected="DataGrid_SelectedRow" TValue="Padron_ModifABC"></GridEvents>
                    <GridColumns>
                        <GridColumn HeaderText="" TextAlign="TextAlign.Center" Width="55">
                            <Template>
                                @{
                                    var data = (context as Padron_ModifABC);
                                    
                                    <button type="button" class="btn btn-primary btn-sm" data-toggle="tooltip" data-placement="top" title="Datos Generales" @onclick="@( e => MostrarEnConsultaGeneral(data))" disabled="@(data.Id_Cuenta <= 0)">
                                        <i class="fa fa-address-book-o" aria-hidden="true"></i>
                                    </button>
                                }
                            </Template>
                        </GridColumn>
                        <!-- <GridColumn Field="@nameof(Padron_ModifABC.Id_Abc)" HeaderText="Id" TextAlign="TextAlign.Center" Width="80" /> -->
                        <GridColumn Field="@nameof(Padron_ModifABC.Fecha)" HeaderText="Fecha" TextAlign="TextAlign.Center" Width="140" />
                        <GridColumn Field="@nameof(Padron_ModifABC.Id_Cuenta)" HeaderText="Cuenta" TextAlign="TextAlign.Center" Width="90" />
                        <GridColumn Field="@nameof(Padron_ModifABC.Razon_Social)" HeaderText="Razon Social" TextAlign="TextAlign.Left" Width="140" />
                        <GridColumn Field="@nameof(Padron_ModifABC.Direccion)" HeaderText="Direccion" TextAlign="TextAlign.Left" Width="140" />
                        <GridColumn Field="@nameof(Padron_ModifABC.Observacion)" HeaderText="Observacion" TextAlign="TextAlign.Left" Width="190" />
                        <GridColumn Field="@nameof(Padron_ModifABC.Maquina)" HeaderText="Maquina" TextAlign="TextAlign.Left" Width="100" />
                        <GridColumn Field="@nameof(Padron_ModifABC.Operador)" HeaderText="Operador" TextAlign="TextAlign.Left" Width="120" />
                        <GridColumn Field="@nameof(Padron_ModifABC.Sucursal)" HeaderText="Sucursal" TextAlign="TextAlign.Left" Width="100" />
                        <GridColumn Field="@nameof(Padron_ModifABC.Localizacion)" HeaderText="Localizacion" TextAlign="TextAlign.Left" Width="90" />
                        <GridColumn Field="@nameof(Padron_ModifABC.Colonia)" HeaderText="Colonia" TextAlign="TextAlign.Left" Width="120" />
                        <GridColumn Field="@nameof(Padron_ModifABC.Departamento)" HeaderText="Departamento" TextAlign="TextAlign.Left" Width="120" />
                    </GridColumns>
                </SfGrid>
            </div>

            <div class="m-1 p-2 border rounded bg-white d-flex flex-column" style="grid-row: 3/4; grid-column: 2/3;">
                <div class="p-1" style="font-weight:bold;">Observacion</div>

                <div class="pb-2" style="height: 8rem;">
                    <textarea class="p-1" rows="5" cols="60" readonly="readonly" style="width:100%; height:100%; resize: none; border:1px solid #bbb;">@ObservacionTemp</textarea>
                </div>

                <div style="height: calc(100% - 10rem);">
                    <SfGrid @ref="dataGrid2" DataSource="@datosGrid_campos" AllowSorting="true" AllowResizing="true" AllowFiltering="false"
                            AllowExcelExport="true" AllowPdfExport="true" Height="100%" Width="100%" EnableHover="true">
                        <GridColumns>
                            <GridColumn Field=@nameof(Padron_ModifABC_Campo.Campo) HeaderText="Campo" Width="110"> </GridColumn>
                            <GridColumn Field=@nameof(Padron_ModifABC_Campo.valor_ant) HeaderText="Valor Anterior" Width="90"></GridColumn>
                            <GridColumn Field=@nameof(Padron_ModifABC_Campo.Valor_act) HeaderText="Valor Nuevo" Width="90"></GridColumn>
                        </GridColumns>
                    </SfGrid>
                </div>
            </div>

        </Content>
    </VentanaSecundaria>

    <BusyIndicator Busy="@busyDialog" ContentText="Cargando datos...." />

    @if (DatosGenerales_visible) {
        <DatosGenerales_Dialog IdOficina="@OficinaActual.Id" Cuenta="@CuentaActual" CerrarVentana="@(e => DatosGenerales_visible = false)" />
    }

}

@code {

    [Parameter] public bool Visible { get; set; }
    [Parameter] public EventCallback CerrarModal { get; set; }
    [Parameter] public DateTime Fecha1 { get; set; }
    [Parameter] public DateTime Fecha2 { get; set; }
    [Parameter] public int Subsistema { get; set; }
    [Parameter] public int Sector { get; set; }
    public string Titulo = "Modificaciones ABC";
    public IEnlace OficinaActual = null;


    //******** Variables ********
    SfGrid<Padron_ModifABC> dataGrid;
    SfGrid<Padron_ModifABC_Campo> dataGrid2;
    public List<Padron_ModifABC> datos;
    public List<Padron_ModifABC> datosGrid;
    public List<Padron_ModifABC_Campo> datos_campos;
    public List<Padron_ModifABC_Campo> datosGrid_campos;
    public string ObservacionTemp = "";

    Dictionary<int, string> cat_sucursales = new Dictionary<int, string>();
    Dictionary<int, string> cat_colonias = new Dictionary<int, string>();
    Dictionary<int, string> cat_departamentos = new Dictionary<int, string>();


    private bool allowPagesGrid = false, busyDialog = false;
    private int sucursal_seleccionado = 0, colonia_seleccionado = 0, departamento_seleccionado = 0;
    private bool DatosGenerales_visible = false;
    private string CuentaActual = "0";

    //******** Funciones Generales ********
    private async Task Cerrar_Modal() {
        this.datosGrid.Clear();
        this.datosGrid_campos.Clear();
        this.allowPagesGrid = false;
        await CerrarModal.InvokeAsync("");
    }
    public async Task Inicializar(Padron_ModifABC_Response _datos) {
        if (_datos.Modificaciones.Length > 1000) {
            this.allowPagesGrid = true;
        }
        this.datos = _datos.Modificaciones.ToList();
        this.datosGrid = _datos.Modificaciones.ToList();
        this.datos_campos = _datos.CamposModificados.ToList();
        Calcular_Catalogo();
        await Task.Delay(100);
    }

    public void Calcular_Catalogo() {
        this.busyDialog = true;

        this.cat_sucursales = new Dictionary<int, string>();
        cat_sucursales.Add(0, "TODOS");
        this.cat_colonias = new Dictionary<int, string>();
        cat_colonias.Add(0, "TODOS");
        this.cat_departamentos = new Dictionary<int, string>();
        cat_departamentos.Add(0, "TODOS");


        this.datos.GroupBy(item => item.Id_Sucursal).ToList().ForEach(group => {
            try {
                this.cat_sucursales.Add(group.Key, group.FirstOrDefault().Sucursal ?? "");
            }
            catch (Exception) { }
        });

        this.datos.GroupBy(item => item.Id_Colonia).ToList().ForEach(group => {
            try {
                this.cat_colonias.Add(group.Key, group.FirstOrDefault().Colonia ?? "");
            }
            catch (Exception) { }
        });

        this.datos.GroupBy(item => item.Id_Departamento).ToList().ForEach(group => {
            try {
                this.cat_departamentos.Add(group.Key, group.FirstOrDefault().Departamento ?? "");
            }
            catch (Exception) { }
        });

        this.busyDialog = false;
    }
    public async Task Procesar() {
        busyDialog = true;
        await Task.Delay(100);

        this.datos.Clear();
        this.datosGrid.Clear();
        this.datos_campos.Clear();
        this.datosGrid_campos.Clear();


        Padron_ModifABC_Response tmpData = padronService.ObtenerModificacionesABC(OficinaActual, Fecha1.Year, Fecha2.Month);

        if (tmpData == null) {
            Toaster.Add("No hay datos disponibles", MatToastType.Info, "Sin Datos", null);
            await Task.Delay(100);
            busyDialog = false;
            return;
        }
        if (tmpData.Modificaciones.Length <= 0) {
            Toaster.Add("No hay datos disponibles", MatToastType.Info, "Sin Datos", null);
            await Task.Delay(100);
            busyDialog = false;
            return;
        }

        this.datos = tmpData.Modificaciones.ToList();
        this.datos_campos = tmpData.CamposModificados.ToList();

        Calcular_Catalogo();
        FiltrarDatos();

        await Task.Delay(100);
        busyDialog = false;
    }
    private void MostrarEnConsultaGeneral(Padron_ModifABC e) {
        this.CuentaActual = e.Id_Cuenta.ToString();
        this.DatosGenerales_visible = true;
    }
    private async Task GenerarExcel() {
        await this.dataGrid.ExcelExport(new ExcelExportProperties {
            FileName = string.Format("sicem_{0}.xlsx", Guid.NewGuid().ToString().Replace("-", ""))
        });
    }
    private void DataGrid_SelectedRow(RowSelectEventArgs<Padron_ModifABC> args) {
        Padron_ModifABC tmpData = (Padron_ModifABC)args.Data;
        this.ObservacionTemp = tmpData.Observacion;
        long idAbc = tmpData.Id_Abc;
        this.datosGrid_campos = datos_campos.Where(item => item.Id_Abc == idAbc).ToList();
    }
    private void ComboBoxFiltro_SelectionChaged(string sender, int val) {
        switch (sender) {
            case "sucursales": this.sucursal_seleccionado = val; break;
            case "colonias": this.colonia_seleccionado = val; break;
            case "departamentos": this.departamento_seleccionado = val; break;
        }
        FiltrarDatos();
    }
    private void FiltrarDatos() {

        if (sucursal_seleccionado == 0 && colonia_seleccionado == 0 && departamento_seleccionado == 0) {
            this.datosGrid = this.datos;
        }
        else {

            var datosFiltrados = this.datos;

            if (sucursal_seleccionado > 0) {
                var tmpData = datosFiltrados;
                datosFiltrados = tmpData.Where(item => item.Id_Sucursal == sucursal_seleccionado).ToList<Padron_ModifABC>();
            }

            if (colonia_seleccionado > 0) {
                var tmpData = datosFiltrados;
                datosFiltrados = tmpData.Where(item => item.Id_Colonia == colonia_seleccionado).ToList<Padron_ModifABC>();
            }

            if (departamento_seleccionado > 0) {
                var tmpData = datosFiltrados;
                datosFiltrados = tmpData.Where(item => item.Id_Departamento == departamento_seleccionado).ToList<Padron_ModifABC>();
            }

            this.datosGrid = datosFiltrados.ToList<Padron_ModifABC>();

        }

    }

}